{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1526352878646},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1526352878647},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1526352878647},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1526352878647},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1526352878648},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1526352878648},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1526352878648},{"_id":"themes/yilia/_config.yml","hash":"f1da213592439767a68a814e68aedcb412b66a0b","modified":1528794912976},{"_id":"themes/yilia/favicon.ico","hash":"6ad76ff7eb606f49f25cfb500fad9f068bc70a6d","modified":1528793696001},{"_id":"themes/yilia/favicon.png","hash":"ff5418dd6d88e1c4df7a59c99174f21b67afa559","modified":1528793679933},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1526352878662},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1526352878687},{"_id":"source/_posts/UEditor-Xiumi.md","hash":"5c4a7f0385073c879885126735da52353c0d6eb1","modified":1531387409447},{"_id":"source/_posts/css3.md","hash":"8fcafc39628344944a4b615a996ba91f5b48061e","modified":1531388246773},{"_id":"source/_posts/first.md","hash":"af4a4d373a7b557768422edba454295073eaf64b","modified":1531387450776},{"_id":"source/_posts/operaVPN.md","hash":"8d095344a7e4fa2e8d9a5216dc127e2dc549f1df","modified":1531387427737},{"_id":"source/_posts/problems.md","hash":"2d22a23deb09e9eee708d3f12a19c4626c97713b","modified":1530067410576},{"_id":"source/_posts/render.md","hash":"153c2393d8668118e4371a7a039ba1e4aaf7c0df","modified":1531387373614},{"_id":"source/_posts/second.md","hash":"82bbdc22a431fca2f03a5189df28df1885db2d40","modified":1528793563164},{"_id":"source/_posts/third.md","hash":"d57bce52c00512f253a0ff07258ce99ad8ad5282","modified":1531387415295},{"_id":"source/_posts/ueditor.md","hash":"c33433b971868f252f70ac98e3c2f791bfa8d7e0","modified":1531387406982},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1526352878634},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1526352878639},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1526352538555},{"_id":"themes/yilia/.git/index","hash":"b4483ee1e6b46cc08ae8da6a152828e61610d496","modified":1526352878687},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1526352878631},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1526352878660},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1526352878660},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1526352878661},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1526352878660},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526352878661},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526352878661},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1526352878661},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1526352878684},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1526352878686},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1526352878662},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1526352878680},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526352878659},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1526352878685},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1526352878686},{"_id":"source/_posts/first/1.png","hash":"6f0b1ae0230f2228ccc5b43ede986db3825c177a","modified":1526356036091},{"_id":"source/_posts/first/10.png","hash":"03de7d3cd9131732e8305baa590e7bf6247a7cf8","modified":1526436618146},{"_id":"source/_posts/first/11.png","hash":"b9fb75aec24aa8002999ce45fd970a2b0fd82cb7","modified":1526436871673},{"_id":"source/_posts/first/12.png","hash":"9eb1ac3d54d96d52f11dcad2f5d9ca35c9538078","modified":1526437359491},{"_id":"source/_posts/first/13.png","hash":"9bb943dd34aa490dcc4a0923677828cab283420d","modified":1526437553070},{"_id":"source/_posts/first/15.png","hash":"188956b7f5b0d4b19e03c3aa2b219f78794873e5","modified":1526438321853},{"_id":"source/_posts/first/16.png","hash":"489a61ac5752b1bc589a1f52b7d325f9ecae0af9","modified":1526438368842},{"_id":"source/_posts/first/14.png","hash":"9542a93e3f38ae89e4cf066a6eaf4b907b61cc08","modified":1526438009728},{"_id":"source/_posts/first/17.png","hash":"353d2b76c666ce98bbb35bf875b9bc57c6ce860b","modified":1526438588409},{"_id":"source/_posts/first/18.png","hash":"2a991d7cb82b288eac65dcb207d5d91b69794660","modified":1526438695632},{"_id":"source/_posts/first/19.png","hash":"a82135cedb6cc4c7bb3a82a27ac7ef891b4849c3","modified":1526438740359},{"_id":"source/_posts/first/2.png","hash":"d210b49918af1dbf4aff420ef1b7da5576252a0e","modified":1526384238810},{"_id":"source/_posts/first/4.png","hash":"cfc8ddd4039eed73e9e9601b56377fb792d7ac18","modified":1526435037550},{"_id":"source/_posts/first/5.png","hash":"bc23bdd57f8f38da19abe5453973d2f0927a8675","modified":1526435088602},{"_id":"source/_posts/first/6.png","hash":"65eee814ddf40799c081e2f2eb54fa93a7a53194","modified":1526435110197},{"_id":"source/_posts/first/8.png","hash":"5f05a89710de6831fe97145b0ca7bc708bf20c2f","modified":1526435737883},{"_id":"source/_posts/first/9.png","hash":"d396bbfcbccf2634c4a0d945a5cc1fa8a93763ae","modified":1526435913424},{"_id":"source/_posts/operaVPN/2.png","hash":"fbd5ab82c9086fb2f0e678c6304b5bf180208f30","modified":1530066741275},{"_id":"source/_posts/operaVPN/4.png","hash":"68386d07235af8604b4fac0f95c72a159cec8a47","modified":1530066889769},{"_id":"source/_posts/operaVPN/3.png","hash":"4d9040eeb2e7eee33fa86f3bdc27326798c1def7","modified":1530066807689},{"_id":"source/_posts/operaVPN/5.png","hash":"54b8ce0788ef72efbf1ba85ccafec41b57167c0d","modified":1530066934742},{"_id":"source/_posts/operaVPN/6.png","hash":"17587a25378851f57cee92b0dae9d7ffc8b19c4f","modified":1530067051359},{"_id":"source/_posts/operaVPN/7.png","hash":"292719a4bd35c41879ea7ee93b4ed921c8bf8d29","modified":1530067274755},{"_id":"source/_posts/second/1.png","hash":"ea99583d3fa96d50af285500be9369792e13c063","modified":1528789884082},{"_id":"source/_posts/second/2.jpg","hash":"ed1026dc25d1ffee17a4361a0e163ae53ca3b35a","modified":1528790136019},{"_id":"source/_posts/ueditor/1.png","hash":"eaa570c4bc89575eaeea7bc3a2ba2132a9c3778c","modified":1530844783852},{"_id":"source/_posts/ueditor/2.png","hash":"6934967e209c1cefbd77bce79556dedafc9f01c1","modified":1530845495709},{"_id":"source/_posts/ueditor/3.png","hash":"2e3d3341c6e0b6f3e4901fd1a2a081e6a33d8c2e","modified":1530849563512},{"_id":"source/_posts/ueditor/4.png","hash":"be20c828ae5a1e8bdfcc934b5f146d8065ba50d1","modified":1530846323240},{"_id":"source/_posts/ueditor/5.png","hash":"b478956eae3008e9af8e0a6c2f7a1223a1192f5d","modified":1530849505862},{"_id":"source/_posts/ueditor/7.png","hash":"9cb5f3648617108a15bd57b2a22753154c22fa88","modified":1530849318701},{"_id":"source/_posts/ueditor/6.png","hash":"ff1d4bf17e6c66e53692a4e614a5581f6c3f669b","modified":1530849202756},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1526352538556},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1526352538556},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1526352538560},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1526352538561},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1526352538561},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1526352538562},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1526352538562},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1526352538563},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1526352538564},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1526352538564},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1526352538565},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1526352538565},{"_id":"themes/yilia/.git/logs/HEAD","hash":"0eeac10e423b523d7b3ff353633ba75481553f2a","modified":1526352878636},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"8107788c3e77677f1be382de26d4961c67e870cb","modified":1528267615701},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1526352878651},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1526352878652},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1526352878652},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1526352878652},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1526352878653},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"14170544b8ea4c1a19c14ffda653234d154e0fd0","modified":1530006359260},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1526442442398},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1528267631766},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1528267622220},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1526352878654},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1526352878654},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1526352878655},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1526352878655},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1526352878659},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1526352878660},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1526352878680},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1526352878681},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1526352878681},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1526352878682},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1526352878682},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1526352878682},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1526352878683},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1526352878683},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1526352878683},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1526352878663},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1526352878664},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1526352878663},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1526352878663},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1526352878664},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1526352878664},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1526352878664},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1526352878665},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1526352878665},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1526352878667},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1526352878669},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1526352878670},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1526352878670},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1526352878670},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1526352878671},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1526352878672},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1526352878672},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1526352878673},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1526352878673},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1526352878673},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1526352878673},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1526352878674},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1526352878674},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1526352878674},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1526352878675},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1526352878675},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1526352878675},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1526352878676},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1526352878676},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1526352878677},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1526352878677},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1526352878677},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1526352878678},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1526352878678},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1526352878678},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1526352878679},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1526352878679},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1526352878679},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1526352878680},{"_id":"source/_posts/first/3.png","hash":"5d8a77dd8891e16c11c4a8714b8d1a3033b7ac50","modified":1526385437659},{"_id":"source/_posts/operaVPN/1.png","hash":"6dc3276d798c45b5b14e08a45ffe2dac664c579f","modified":1530066680579},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1526352878659},{"_id":"themes/yilia/.git/objects/pack/pack-d91b96247e3dc9ea6670b71e9dcce74914f2ba78.idx","hash":"f9dabb64699353ef0ec6a2e6f6099e0500aff4b6","modified":1526352878574},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1526352878636},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1526352878655},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1526352878655},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1526352878656},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1526352878656},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1526352878656},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1526352878657},{"_id":"themes/yilia/layout/_partial/post/leancloud.ejs","hash":"a0e81e23c5c60aa6e52b1294fc5881b5d04074ac","modified":1528267610027},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1526352878657},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1526352878657},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"b66ebbef633059ade3b1ce7f060cc9e40a7868ea","modified":1528267612393},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1526352878658},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1526352878665},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1526352878666},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1526352878666},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1526352878667},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1526352878667},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1526352878668},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1526352878668},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1526352878669},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1526352878669},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1526352878671},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1526352878671},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1526352878671},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"0eeac10e423b523d7b3ff353633ba75481553f2a","modified":1526352878637},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1526352878634},{"_id":"source/_posts/first/20.png","hash":"e2d6b4837ba96fc65d663db4ff5f8a8f0a4be709","modified":1526438790416},{"_id":"source/_posts/first/7.png","hash":"1cead0b5b127416122ed0597eab01d37f72ffe46","modified":1526435352681},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"0eeac10e423b523d7b3ff353633ba75481553f2a","modified":1526352878634},{"_id":"themes/yilia/.git/objects/pack/pack-d91b96247e3dc9ea6670b71e9dcce74914f2ba78.pack","hash":"b378db191fd5ac64da3f2c9ef7274d72c5d484d8","modified":1526352878577}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"渐进增强 vs 优雅降级","date":"2018-07-12T09:24:42.000Z","_content":"\n## 前言\n印象中，渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。\n<!-- more -->\n## 正文\n\n### 名词解释\n\n**渐进增强（Progressive Enhancement）**：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。\n\n**优雅降级（Graceful Degradation）**：一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。\n\n其实渐进增强和优雅降级并非什么新概念，只是旧的概念换了一个新的说法。在传统软件开发中，经常会提到向上兼容和向下兼容的概念。渐进增强相当于向上兼容，而优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少。大多数软件都是向下兼容的，比如说Office2010能打开Office2007，Office2006，Office2005，Office2003等建的word文件，但是用Office2003就不能打开用Office2007，Office2010等建的word文件！\n\n### 案例分析\n看如下这两段代码的书写顺序，表示了我们开发的着重点。\n\n\n        .transition { /*渐进增强写法*/\n          -webkit-transition: all .5s;\n            -moz-transition: all .5s;\n              -o-transition: all .5s;\n                  transition: all .5s;\n        }\n        .transition { /*优雅降级写法*/\n                  transition: all .5s;\n              -o-transition: all .5s;\n            -moz-transition: all .5s;\n          -webkit-transition: all .5s;\n        }\n\n前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：\n\n很久以前：浏览器前缀CSS3和正常CSS3都不支持；\n不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；\n现在：浏览器既支持前缀CSS3，又支持正常CSS3；\n未来：浏览器不支持前缀CSS3，仅支持正常CSS3.\n渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。\n\n就CSS3这种例子而言，我更加推崇渐进增强的写法。因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。如果你好奇究竟是什么属性在前缀CSS3和正常CSS3中显式效果不一样，可以看看这篇文章[《需警惕CSS3属性的书写顺序》](https://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/)。\n\n### 如何抉择\n\n如果软件开发的预算和时间充足，就不存在抉择的问题。然而现实很残酷，要么开发周期短，要么开发预算少，或者二者兼而有之，这个时候该如何抉择？就我个人而言，讲讲我的观点。\n\n根据你的用户所使用的客户端的版本来做决定。请注意我的措辞，我没有用浏览器，而是用客户端。因为渐进增强和优雅降级的概念本质上是软件开发过程中低版本软件与高版本软件面对新功能的兼容抉择问题。服务端程序很少存在这种问题，因为开发者可以控制服务端运行程序的版本，就无所谓渐进增强和优雅降级的问题。但是客户端程序则不是开发者所能控制的（你总不能强制用户去升级它们的浏览器吧）。我们所谓的客户端，可以指浏览器，移动终端设备（如：手机，平板电脑，智能手表等）以及它们对应的应用程序（浏览器对应的是网站，移动终端设备对应的是相应的APP）。\n\n现在有很成熟的技术，能够让你分析使用你客户端程序的版本比例。如果低版本用户居多，当然优先采用渐进增强的开发流程；如果高版本用户居多，为了提高大多数用户的使用体验，那当然优先采用优雅降级的开发流程。\n\n然而事实情况是怎么样的呢？绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如：新浪微博网站前端的更新，拥有这种亿级用户的网站，绝对不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。但也不是没有反例。如果你开发的是一款面向青少年的软件（或网站），你知道这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本（而不像我们老一辈的用户）。面对这种情况，渐进增强的开发流程实为上选。\n\n[阅读原文](https://www.jianshu.com/p/d313f1108862)","source":"_posts/css3.md","raw":"---\ntitle: 渐进增强 VS 优雅降级\ndate: 2018-07-12 17:24:42\ntags:\n   - css3\n   - 兼容\n---\n\n## 前言\n印象中，渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。\n<!-- more -->\n## 正文\n\n### 名词解释\n\n**渐进增强（Progressive Enhancement）**：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。\n\n**优雅降级（Graceful Degradation）**：一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。\n\n其实渐进增强和优雅降级并非什么新概念，只是旧的概念换了一个新的说法。在传统软件开发中，经常会提到向上兼容和向下兼容的概念。渐进增强相当于向上兼容，而优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少。大多数软件都是向下兼容的，比如说Office2010能打开Office2007，Office2006，Office2005，Office2003等建的word文件，但是用Office2003就不能打开用Office2007，Office2010等建的word文件！\n\n### 案例分析\n看如下这两段代码的书写顺序，表示了我们开发的着重点。\n\n\n        .transition { /*渐进增强写法*/\n          -webkit-transition: all .5s;\n            -moz-transition: all .5s;\n              -o-transition: all .5s;\n                  transition: all .5s;\n        }\n        .transition { /*优雅降级写法*/\n                  transition: all .5s;\n              -o-transition: all .5s;\n            -moz-transition: all .5s;\n          -webkit-transition: all .5s;\n        }\n\n前缀CSS3（-webkit-* / -moz-* / -o-*）和正常CSS3在浏览器中的支持情况是这样的：\n\n很久以前：浏览器前缀CSS3和正常CSS3都不支持；\n不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；\n现在：浏览器既支持前缀CSS3，又支持正常CSS3；\n未来：浏览器不支持前缀CSS3，仅支持正常CSS3.\n渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。\n\n就CSS3这种例子而言，我更加推崇渐进增强的写法。因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。如果你好奇究竟是什么属性在前缀CSS3和正常CSS3中显式效果不一样，可以看看这篇文章[《需警惕CSS3属性的书写顺序》](https://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/)。\n\n### 如何抉择\n\n如果软件开发的预算和时间充足，就不存在抉择的问题。然而现实很残酷，要么开发周期短，要么开发预算少，或者二者兼而有之，这个时候该如何抉择？就我个人而言，讲讲我的观点。\n\n根据你的用户所使用的客户端的版本来做决定。请注意我的措辞，我没有用浏览器，而是用客户端。因为渐进增强和优雅降级的概念本质上是软件开发过程中低版本软件与高版本软件面对新功能的兼容抉择问题。服务端程序很少存在这种问题，因为开发者可以控制服务端运行程序的版本，就无所谓渐进增强和优雅降级的问题。但是客户端程序则不是开发者所能控制的（你总不能强制用户去升级它们的浏览器吧）。我们所谓的客户端，可以指浏览器，移动终端设备（如：手机，平板电脑，智能手表等）以及它们对应的应用程序（浏览器对应的是网站，移动终端设备对应的是相应的APP）。\n\n现在有很成熟的技术，能够让你分析使用你客户端程序的版本比例。如果低版本用户居多，当然优先采用渐进增强的开发流程；如果高版本用户居多，为了提高大多数用户的使用体验，那当然优先采用优雅降级的开发流程。\n\n然而事实情况是怎么样的呢？绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如：新浪微博网站前端的更新，拥有这种亿级用户的网站，绝对不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。但也不是没有反例。如果你开发的是一款面向青少年的软件（或网站），你知道这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本（而不像我们老一辈的用户）。面对这种情况，渐进增强的开发流程实为上选。\n\n[阅读原文](https://www.jianshu.com/p/d313f1108862)","slug":"css3","published":1,"updated":"2018-07-12T09:37:26.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqv200006cuvun6qdxiv","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>印象中，渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。<br><a id=\"more\"></a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><p><strong>渐进增强（Progressive Enhancement）</strong>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>\n<p><strong>优雅降级（Graceful Degradation）</strong>：一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。</p>\n<p>其实渐进增强和优雅降级并非什么新概念，只是旧的概念换了一个新的说法。在传统软件开发中，经常会提到向上兼容和向下兼容的概念。渐进增强相当于向上兼容，而优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少。大多数软件都是向下兼容的，比如说Office2010能打开Office2007，Office2006，Office2005，Office2003等建的word文件，但是用Office2003就不能打开用Office2007，Office2010等建的word文件！</p>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><p>看如下这两段代码的书写顺序，表示了我们开发的着重点。</p>\n<pre><code>.transition { /*渐进增强写法*/\n  -webkit-transition: all .5s;\n    -moz-transition: all .5s;\n      -o-transition: all .5s;\n          transition: all .5s;\n}\n.transition { /*优雅降级写法*/\n          transition: all .5s;\n      -o-transition: all .5s;\n    -moz-transition: all .5s;\n  -webkit-transition: all .5s;\n}\n</code></pre><p>前缀CSS3（-webkit-<em> / -moz-</em> / -o-*）和正常CSS3在浏览器中的支持情况是这样的：</p>\n<p>很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>未来：浏览器不支持前缀CSS3，仅支持正常CSS3.<br>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>\n<p>就CSS3这种例子而言，我更加推崇渐进增强的写法。因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。如果你好奇究竟是什么属性在前缀CSS3和正常CSS3中显式效果不一样，可以看看这篇文章<a href=\"https://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/\" target=\"_blank\" rel=\"noopener\">《需警惕CSS3属性的书写顺序》</a>。</p>\n<h3 id=\"如何抉择\"><a href=\"#如何抉择\" class=\"headerlink\" title=\"如何抉择\"></a>如何抉择</h3><p>如果软件开发的预算和时间充足，就不存在抉择的问题。然而现实很残酷，要么开发周期短，要么开发预算少，或者二者兼而有之，这个时候该如何抉择？就我个人而言，讲讲我的观点。</p>\n<p>根据你的用户所使用的客户端的版本来做决定。请注意我的措辞，我没有用浏览器，而是用客户端。因为渐进增强和优雅降级的概念本质上是软件开发过程中低版本软件与高版本软件面对新功能的兼容抉择问题。服务端程序很少存在这种问题，因为开发者可以控制服务端运行程序的版本，就无所谓渐进增强和优雅降级的问题。但是客户端程序则不是开发者所能控制的（你总不能强制用户去升级它们的浏览器吧）。我们所谓的客户端，可以指浏览器，移动终端设备（如：手机，平板电脑，智能手表等）以及它们对应的应用程序（浏览器对应的是网站，移动终端设备对应的是相应的APP）。</p>\n<p>现在有很成熟的技术，能够让你分析使用你客户端程序的版本比例。如果低版本用户居多，当然优先采用渐进增强的开发流程；如果高版本用户居多，为了提高大多数用户的使用体验，那当然优先采用优雅降级的开发流程。</p>\n<p>然而事实情况是怎么样的呢？绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如：新浪微博网站前端的更新，拥有这种亿级用户的网站，绝对不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。但也不是没有反例。如果你开发的是一款面向青少年的软件（或网站），你知道这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本（而不像我们老一辈的用户）。面对这种情况，渐进增强的开发流程实为上选。</p>\n<p><a href=\"https://www.jianshu.com/p/d313f1108862\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>印象中，渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以在高级浏览器中使用CSS3，而在低级浏览器只保证最基本的功能。二者的目的都是关注不同浏览器下的不同体验，但是它们侧重点不同，所以导致了工作流程上的不同。<br>","more":"</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><p><strong>渐进增强（Progressive Enhancement）</strong>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>\n<p><strong>优雅降级（Graceful Degradation）</strong>：一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。</p>\n<p>其实渐进增强和优雅降级并非什么新概念，只是旧的概念换了一个新的说法。在传统软件开发中，经常会提到向上兼容和向下兼容的概念。渐进增强相当于向上兼容，而优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少。大多数软件都是向下兼容的，比如说Office2010能打开Office2007，Office2006，Office2005，Office2003等建的word文件，但是用Office2003就不能打开用Office2007，Office2010等建的word文件！</p>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><p>看如下这两段代码的书写顺序，表示了我们开发的着重点。</p>\n<pre><code>.transition { /*渐进增强写法*/\n  -webkit-transition: all .5s;\n    -moz-transition: all .5s;\n      -o-transition: all .5s;\n          transition: all .5s;\n}\n.transition { /*优雅降级写法*/\n          transition: all .5s;\n      -o-transition: all .5s;\n    -moz-transition: all .5s;\n  -webkit-transition: all .5s;\n}\n</code></pre><p>前缀CSS3（-webkit-<em> / -moz-</em> / -o-*）和正常CSS3在浏览器中的支持情况是这样的：</p>\n<p>很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>未来：浏览器不支持前缀CSS3，仅支持正常CSS3.<br>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>\n<p>就CSS3这种例子而言，我更加推崇渐进增强的写法。因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。如果你好奇究竟是什么属性在前缀CSS3和正常CSS3中显式效果不一样，可以看看这篇文章<a href=\"https://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/\" target=\"_blank\" rel=\"noopener\">《需警惕CSS3属性的书写顺序》</a>。</p>\n<h3 id=\"如何抉择\"><a href=\"#如何抉择\" class=\"headerlink\" title=\"如何抉择\"></a>如何抉择</h3><p>如果软件开发的预算和时间充足，就不存在抉择的问题。然而现实很残酷，要么开发周期短，要么开发预算少，或者二者兼而有之，这个时候该如何抉择？就我个人而言，讲讲我的观点。</p>\n<p>根据你的用户所使用的客户端的版本来做决定。请注意我的措辞，我没有用浏览器，而是用客户端。因为渐进增强和优雅降级的概念本质上是软件开发过程中低版本软件与高版本软件面对新功能的兼容抉择问题。服务端程序很少存在这种问题，因为开发者可以控制服务端运行程序的版本，就无所谓渐进增强和优雅降级的问题。但是客户端程序则不是开发者所能控制的（你总不能强制用户去升级它们的浏览器吧）。我们所谓的客户端，可以指浏览器，移动终端设备（如：手机，平板电脑，智能手表等）以及它们对应的应用程序（浏览器对应的是网站，移动终端设备对应的是相应的APP）。</p>\n<p>现在有很成熟的技术，能够让你分析使用你客户端程序的版本比例。如果低版本用户居多，当然优先采用渐进增强的开发流程；如果高版本用户居多，为了提高大多数用户的使用体验，那当然优先采用优雅降级的开发流程。</p>\n<p>然而事实情况是怎么样的呢？绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如：新浪微博网站前端的更新，拥有这种亿级用户的网站，绝对不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。但也不是没有反例。如果你开发的是一款面向青少年的软件（或网站），你知道这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本（而不像我们老一辈的用户）。面对这种情况，渐进增强的开发流程实为上选。</p>\n<p><a href=\"https://www.jianshu.com/p/d313f1108862\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>"},{"title":"operaVPN","date":"2018-06-27T02:28:11.000Z","_content":"\n### 前言\n前些天在网上偶然发现一个利用 opera 浏览器免费翻墙的小技巧，挺好用的，记录下来。\n<!-- more -->\n\n### 正文\n\n首先肯定是下载 opera 浏览器了，安装之后先不着急运行，先打开系统设置，找到箭头所指选项\n>{% asset_img 1.png %}\n\n然后点击更改位置\n\n>{% asset_img 2.png %}\n\n选择香港特别行政区\n\n>{% asset_img 3.png %}\n\n选定之后运行 opera 浏览器，打开设置页面，选择‘隐私和安全’选项\n\n>{% asset_img 4.png %}\n\n然后找到 VPN 选项，点击启用 vpn\n\n>{% asset_img 5.png %}\n\n然后就可以在导航栏输入 https://www.google.com.hk 访问了（毕竟是免费的，所以网速。。。能google一些工作中遇到的问题就可以了）。\n\n>{% asset_img 7.png %}\n\n### 后记\n\n在启用 VPN 之后，访问网页时导航栏左边会有 VPN 按钮，点击可以便捷的开启和关闭（访问国内网站开启 VPN 的话可是很慢的哦）。还可以切换虚拟 ip 地址以及展示使用 VPN 的数据流量。\n>{% asset_img 6.png %}\n","source":"_posts/operaVPN.md","raw":"---\ntitle: operaVPN\ndate: 2018-06-27 10:28:11\ntags:\n    - opera 浏览器\n    - 翻墙\n---\n\n### 前言\n前些天在网上偶然发现一个利用 opera 浏览器免费翻墙的小技巧，挺好用的，记录下来。\n<!-- more -->\n\n### 正文\n\n首先肯定是下载 opera 浏览器了，安装之后先不着急运行，先打开系统设置，找到箭头所指选项\n>{% asset_img 1.png %}\n\n然后点击更改位置\n\n>{% asset_img 2.png %}\n\n选择香港特别行政区\n\n>{% asset_img 3.png %}\n\n选定之后运行 opera 浏览器，打开设置页面，选择‘隐私和安全’选项\n\n>{% asset_img 4.png %}\n\n然后找到 VPN 选项，点击启用 vpn\n\n>{% asset_img 5.png %}\n\n然后就可以在导航栏输入 https://www.google.com.hk 访问了（毕竟是免费的，所以网速。。。能google一些工作中遇到的问题就可以了）。\n\n>{% asset_img 7.png %}\n\n### 后记\n\n在启用 VPN 之后，访问网页时导航栏左边会有 VPN 按钮，点击可以便捷的开启和关闭（访问国内网站开启 VPN 的话可是很慢的哦）。还可以切换虚拟 ip 地址以及展示使用 VPN 的数据流量。\n>{% asset_img 6.png %}\n","slug":"operaVPN","published":1,"updated":"2018-07-12T09:23:47.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqv700016cuvvqprkq1n","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前些天在网上偶然发现一个利用 opera 浏览器免费翻墙的小技巧，挺好用的，记录下来。<br><a id=\"more\"></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>首先肯定是下载 opera 浏览器了，安装之后先不着急运行，先打开系统设置，找到箭头所指选项</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/1.png\">\n</blockquote>\n<p>然后点击更改位置</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/2.png\">\n</blockquote>\n<p>选择香港特别行政区</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/3.png\">\n</blockquote>\n<p>选定之后运行 opera 浏览器，打开设置页面，选择‘隐私和安全’选项</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/4.png\">\n</blockquote>\n<p>然后找到 VPN 选项，点击启用 vpn</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/5.png\">\n</blockquote>\n<p>然后就可以在导航栏输入 <a href=\"https://www.google.com.hk\" target=\"_blank\" rel=\"noopener\">https://www.google.com.hk</a> 访问了（毕竟是免费的，所以网速。。。能google一些工作中遇到的问题就可以了）。</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/7.png\">\n</blockquote>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>在启用 VPN 之后，访问网页时导航栏左边会有 VPN 按钮，点击可以便捷的开启和关闭（访问国内网站开启 VPN 的话可是很慢的哦）。还可以切换虚拟 ip 地址以及展示使用 VPN 的数据流量。</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/6.png\">\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前些天在网上偶然发现一个利用 opera 浏览器免费翻墙的小技巧，挺好用的，记录下来。<br>","more":"</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>首先肯定是下载 opera 浏览器了，安装之后先不着急运行，先打开系统设置，找到箭头所指选项</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/1.png\">\n</blockquote>\n<p>然后点击更改位置</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/2.png\">\n</blockquote>\n<p>选择香港特别行政区</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/3.png\">\n</blockquote>\n<p>选定之后运行 opera 浏览器，打开设置页面，选择‘隐私和安全’选项</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/4.png\">\n</blockquote>\n<p>然后找到 VPN 选项，点击启用 vpn</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/5.png\">\n</blockquote>\n<p>然后就可以在导航栏输入 <a href=\"https://www.google.com.hk\" target=\"_blank\" rel=\"noopener\">https://www.google.com.hk</a> 访问了（毕竟是免费的，所以网速。。。能google一些工作中遇到的问题就可以了）。</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/7.png\">\n</blockquote>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>在启用 VPN 之后，访问网页时导航栏左边会有 VPN 按钮，点击可以便捷的开启和关闭（访问国内网站开启 VPN 的话可是很慢的哦）。还可以切换虚拟 ip 地址以及展示使用 VPN 的数据流量。</p>\n<blockquote>\n<img src=\"/myBlog/2018/06/27/operaVPN/6.png\">\n</blockquote>"},{"title":"UEditor对接秀米","date":"2018-07-06T05:48:57.000Z","_content":"\n### 前言\n\n在上一篇博客里，介绍了在页面中对 UEdiotr 的使用。但是项目里还让对接秀米的编辑器。先看一下期待的[效果](http://hgs.xiumi.us/uedit/)。在页面里点击工具栏最后的秀米图标，会弹出秀米的组件弹窗，选中组件后点击对号，会发现 UEditor 中出现了秀米的组件。好吧，知道了效果就开始艰苦的编码过程吧。\n<!-- more -->\n### 正文\n\n1. 下载[http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js](http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js)和[http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css](http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css)，放在 assets/xiumi 目录下，接着在我们上一篇新建的 ueditor.vue 文件里面引用。\n\n2. 下载[http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html](http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html)和[http://hgs.xiumi.us/uedit/dialogs/internal.js](http://hgs.xiumi.us/uedit/dialogs/internal.js)，在 /static 目录下新建 xiumi 文件夹，将这两个文件放进去。这时候要修改上面的 xiumi-ue-dialog-v5.js，把里面的 iframeurl 替换成 '/static/xiumi/xiumi-ue-dialog-v5.html'。\n\n3. 刷新页面，大功告成。","source":"_posts/UEditor-Xiumi.md","raw":"---\ntitle: UEditor对接秀米\ndate: 2018-07-06 13:48:57\ntags:\n    - UEditor\n    - 秀米\n---\n\n### 前言\n\n在上一篇博客里，介绍了在页面中对 UEdiotr 的使用。但是项目里还让对接秀米的编辑器。先看一下期待的[效果](http://hgs.xiumi.us/uedit/)。在页面里点击工具栏最后的秀米图标，会弹出秀米的组件弹窗，选中组件后点击对号，会发现 UEditor 中出现了秀米的组件。好吧，知道了效果就开始艰苦的编码过程吧。\n<!-- more -->\n### 正文\n\n1. 下载[http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js](http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js)和[http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css](http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css)，放在 assets/xiumi 目录下，接着在我们上一篇新建的 ueditor.vue 文件里面引用。\n\n2. 下载[http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html](http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html)和[http://hgs.xiumi.us/uedit/dialogs/internal.js](http://hgs.xiumi.us/uedit/dialogs/internal.js)，在 /static 目录下新建 xiumi 文件夹，将这两个文件放进去。这时候要修改上面的 xiumi-ue-dialog-v5.js，把里面的 iframeurl 替换成 '/static/xiumi/xiumi-ue-dialog-v5.html'。\n\n3. 刷新页面，大功告成。","slug":"UEditor-Xiumi","published":1,"updated":"2018-07-12T09:23:29.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqvh00036cuvs6de7rbo","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在上一篇博客里，介绍了在页面中对 UEdiotr 的使用。但是项目里还让对接秀米的编辑器。先看一下期待的<a href=\"http://hgs.xiumi.us/uedit/\" target=\"_blank\" rel=\"noopener\">效果</a>。在页面里点击工具栏最后的秀米图标，会弹出秀米的组件弹窗，选中组件后点击对号，会发现 UEditor 中出现了秀米的组件。好吧，知道了效果就开始艰苦的编码过程吧。<br><a id=\"more\"></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><ol>\n<li><p>下载<a href=\"http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js\" target=\"_blank\" rel=\"noopener\">http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js</a>和<a href=\"http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css\" target=\"_blank\" rel=\"noopener\">http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css</a>，放在 assets/xiumi 目录下，接着在我们上一篇新建的 ueditor.vue 文件里面引用。</p>\n</li>\n<li><p>下载<a href=\"http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html\" target=\"_blank\" rel=\"noopener\">http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html</a>和<a href=\"http://hgs.xiumi.us/uedit/dialogs/internal.js\" target=\"_blank\" rel=\"noopener\">http://hgs.xiumi.us/uedit/dialogs/internal.js</a>，在 /static 目录下新建 xiumi 文件夹，将这两个文件放进去。这时候要修改上面的 xiumi-ue-dialog-v5.js，把里面的 iframeurl 替换成 ‘/static/xiumi/xiumi-ue-dialog-v5.html’。</p>\n</li>\n<li><p>刷新页面，大功告成。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在上一篇博客里，介绍了在页面中对 UEdiotr 的使用。但是项目里还让对接秀米的编辑器。先看一下期待的<a href=\"http://hgs.xiumi.us/uedit/\" target=\"_blank\" rel=\"noopener\">效果</a>。在页面里点击工具栏最后的秀米图标，会弹出秀米的组件弹窗，选中组件后点击对号，会发现 UEditor 中出现了秀米的组件。好吧，知道了效果就开始艰苦的编码过程吧。<br>","more":"</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><ol>\n<li><p>下载<a href=\"http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js\" target=\"_blank\" rel=\"noopener\">http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.js</a>和<a href=\"http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css\" target=\"_blank\" rel=\"noopener\">http://xiumi.us/connect/ue/v5/xiumi-ue-v5.css</a>，放在 assets/xiumi 目录下，接着在我们上一篇新建的 ueditor.vue 文件里面引用。</p>\n</li>\n<li><p>下载<a href=\"http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html\" target=\"_blank\" rel=\"noopener\">http://xiumi.us/connect/ue/v5/xiumi-ue-dialog-v5.html</a>和<a href=\"http://hgs.xiumi.us/uedit/dialogs/internal.js\" target=\"_blank\" rel=\"noopener\">http://hgs.xiumi.us/uedit/dialogs/internal.js</a>，在 /static 目录下新建 xiumi 文件夹，将这两个文件放进去。这时候要修改上面的 xiumi-ue-dialog-v5.js，把里面的 iframeurl 替换成 ‘/static/xiumi/xiumi-ue-dialog-v5.html’。</p>\n</li>\n<li><p>刷新页面，大功告成。</p>\n</li>\n</ol>"},{"layout":"the","title":"工作中遇到的问题","date":"2018-06-25T09:27:03.000Z","_content":"\n### 此博客专用记录自己工作中遇到的各种问题\n\n1.2018-6-25\n  手机网页在 OPPO 和华为某机型上无法打开，后来发现是某行字符串使用反引号 ` 来标记的。换成单引号，解决。\n<!-- more -->\n\n2.2018-6-25\n  有一个页面因为有文件上传的功能，所以提交的时候以 FormData 提交的，结果在 iphone6 上出现错误。后来定位到是数据格式不正确， ios 对 FormData 不是特别支持。之前是在页面新建 form 表单，然后把需要提交的变量和值赋值给 form 表单里面的 input 标签，然后在 js 里面执行\n\n    var dataParams = new FormData(document.getElementById(\"form\"))\n  \n  直接把 form 表单转化成 FormData 格式，但是在 iphone6 和 iphone6s 上不行，只能用\n\n    var dataParams = new FormData()\n  \n  然后一项一项的用 FormData 的 append 方法放进去，解决。\n\n3.2018-6-25\n  前些天有个同事微信公众号页面在手机端和微信web开发者工具里面可以正常打开，但是在 pc 端微信浏览器缺显示错误，后经排查是在 js 里面使用了 es6 的箭头函数，换成普通方法后就可以了。过了几天另个同事也出现了同样的问题，发现是使用了 let 运算符，换成 var ，解决。\n\n4.2018-6-27\n  这些天在做一个统计用户页面行为的功能，在用户操作页面的时候把相应的数据存下来，然后在浏览器刷新、关闭以及切换网页的时候传输到后台。刚开始用的 window.onbeforeunload 事件，但是后来发现在用户关闭页面的时候不会执行，然后又用 window.onunload 事件，结果微信浏览器还是没用。这时候 google 的用处就体现出来了，有一篇文章介绍了 pagehide 事件，应用之后发现完美，（百度引擎是真滴垃圾）解决。","source":"_posts/problems.md","raw":"---\nlayout: the\ntitle: 工作中遇到的问题\ndate: 2018-06-25 17:27:03\ntags:\n---\n\n### 此博客专用记录自己工作中遇到的各种问题\n\n1.2018-6-25\n  手机网页在 OPPO 和华为某机型上无法打开，后来发现是某行字符串使用反引号 ` 来标记的。换成单引号，解决。\n<!-- more -->\n\n2.2018-6-25\n  有一个页面因为有文件上传的功能，所以提交的时候以 FormData 提交的，结果在 iphone6 上出现错误。后来定位到是数据格式不正确， ios 对 FormData 不是特别支持。之前是在页面新建 form 表单，然后把需要提交的变量和值赋值给 form 表单里面的 input 标签，然后在 js 里面执行\n\n    var dataParams = new FormData(document.getElementById(\"form\"))\n  \n  直接把 form 表单转化成 FormData 格式，但是在 iphone6 和 iphone6s 上不行，只能用\n\n    var dataParams = new FormData()\n  \n  然后一项一项的用 FormData 的 append 方法放进去，解决。\n\n3.2018-6-25\n  前些天有个同事微信公众号页面在手机端和微信web开发者工具里面可以正常打开，但是在 pc 端微信浏览器缺显示错误，后经排查是在 js 里面使用了 es6 的箭头函数，换成普通方法后就可以了。过了几天另个同事也出现了同样的问题，发现是使用了 let 运算符，换成 var ，解决。\n\n4.2018-6-27\n  这些天在做一个统计用户页面行为的功能，在用户操作页面的时候把相应的数据存下来，然后在浏览器刷新、关闭以及切换网页的时候传输到后台。刚开始用的 window.onbeforeunload 事件，但是后来发现在用户关闭页面的时候不会执行，然后又用 window.onunload 事件，结果微信浏览器还是没用。这时候 google 的用处就体现出来了，有一篇文章介绍了 pagehide 事件，应用之后发现完美，（百度引擎是真滴垃圾）解决。","slug":"problems","published":1,"updated":"2018-06-27T02:43:30.576Z","comments":1,"photos":[],"link":"","_id":"cjkhozqvi00046cuveukfsmpl","content":"<h3 id=\"此博客专用记录自己工作中遇到的各种问题\"><a href=\"#此博客专用记录自己工作中遇到的各种问题\" class=\"headerlink\" title=\"此博客专用记录自己工作中遇到的各种问题\"></a>此博客专用记录自己工作中遇到的各种问题</h3><p>1.2018-6-25<br>  手机网页在 OPPO 和华为某机型上无法打开，后来发现是某行字符串使用反引号 ` 来标记的。换成单引号，解决。<br><a id=\"more\"></a></p>\n<p>2.2018-6-25<br>  有一个页面因为有文件上传的功能，所以提交的时候以 FormData 提交的，结果在 iphone6 上出现错误。后来定位到是数据格式不正确， ios 对 FormData 不是特别支持。之前是在页面新建 form 表单，然后把需要提交的变量和值赋值给 form 表单里面的 input 标签，然后在 js 里面执行</p>\n<pre><code>var dataParams = new FormData(document.getElementById(&quot;form&quot;))\n</code></pre><p>  直接把 form 表单转化成 FormData 格式，但是在 iphone6 和 iphone6s 上不行，只能用</p>\n<pre><code>var dataParams = new FormData()\n</code></pre><p>  然后一项一项的用 FormData 的 append 方法放进去，解决。</p>\n<p>3.2018-6-25<br>  前些天有个同事微信公众号页面在手机端和微信web开发者工具里面可以正常打开，但是在 pc 端微信浏览器缺显示错误，后经排查是在 js 里面使用了 es6 的箭头函数，换成普通方法后就可以了。过了几天另个同事也出现了同样的问题，发现是使用了 let 运算符，换成 var ，解决。</p>\n<p>4.2018-6-27<br>  这些天在做一个统计用户页面行为的功能，在用户操作页面的时候把相应的数据存下来，然后在浏览器刷新、关闭以及切换网页的时候传输到后台。刚开始用的 window.onbeforeunload 事件，但是后来发现在用户关闭页面的时候不会执行，然后又用 window.onunload 事件，结果微信浏览器还是没用。这时候 google 的用处就体现出来了，有一篇文章介绍了 pagehide 事件，应用之后发现完美，（百度引擎是真滴垃圾）解决。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"此博客专用记录自己工作中遇到的各种问题\"><a href=\"#此博客专用记录自己工作中遇到的各种问题\" class=\"headerlink\" title=\"此博客专用记录自己工作中遇到的各种问题\"></a>此博客专用记录自己工作中遇到的各种问题</h3><p>1.2018-6-25<br>  手机网页在 OPPO 和华为某机型上无法打开，后来发现是某行字符串使用反引号 ` 来标记的。换成单引号，解决。<br>","more":"</p>\n<p>2.2018-6-25<br>  有一个页面因为有文件上传的功能，所以提交的时候以 FormData 提交的，结果在 iphone6 上出现错误。后来定位到是数据格式不正确， ios 对 FormData 不是特别支持。之前是在页面新建 form 表单，然后把需要提交的变量和值赋值给 form 表单里面的 input 标签，然后在 js 里面执行</p>\n<pre><code>var dataParams = new FormData(document.getElementById(&quot;form&quot;))\n</code></pre><p>  直接把 form 表单转化成 FormData 格式，但是在 iphone6 和 iphone6s 上不行，只能用</p>\n<pre><code>var dataParams = new FormData()\n</code></pre><p>  然后一项一项的用 FormData 的 append 方法放进去，解决。</p>\n<p>3.2018-6-25<br>  前些天有个同事微信公众号页面在手机端和微信web开发者工具里面可以正常打开，但是在 pc 端微信浏览器缺显示错误，后经排查是在 js 里面使用了 es6 的箭头函数，换成普通方法后就可以了。过了几天另个同事也出现了同样的问题，发现是使用了 let 运算符，换成 var ，解决。</p>\n<p>4.2018-6-27<br>  这些天在做一个统计用户页面行为的功能，在用户操作页面的时候把相应的数据存下来，然后在浏览器刷新、关闭以及切换网页的时候传输到后台。刚开始用的 window.onbeforeunload 事件，但是后来发现在用户关闭页面的时候不会执行，然后又用 window.onunload 事件，结果微信浏览器还是没用。这时候 google 的用处就体现出来了，有一篇文章介绍了 pagehide 事件，应用之后发现完美，（百度引擎是真滴垃圾）解决。</p>"},{"title":"Hexo 与 Github 搭建个人博客教程","date":"2018-05-15T03:27:49.000Z","_content":"\n### 前言\n\n工作几年了，第一次写博客，看看自己能坚持多久吧。\n今天就将hexo搭配github搭建个人博客教程作为第一篇文章。\n<!-- more -->\n\n### 准备工作\n工欲善其事必先利其器。要想搭建个人博客，node和git是必须的工具。网上关于这两种工具的下载安装都有很成熟的介绍，在这里就不献丑了。\n然后就是在github上注册自己的账号，成功后准备接下来的工作。\n### github新建项目\n>{% asset_img 1.png %}\n\n<br/>\n点击右边绿色的NEW按钮，会跳转到\n<br/>\n\n>{% asset_img 2.png %}\n\n<br/>\n输入对应的库名字以及描述，点击下方的绿色的Create repository按钮，就会生成自己的库了。如下图\n<br/>\n\n>{% asset_img 3.png %}\n\n然后复制自己库地址的SSH，保存，稍后会用到\n\n### hexo安装\n在命令行执行下列代码即可全局安装hexo\n\n>npm install -g hexo-cli\n\n如果安装速度比较慢的话，也可以使用npm淘宝镜像来下载\n\n>npm install -g hexo-cli --registry=https://registry.npm.taobao.org\n\n### hexo使用\n在命令行工具执行\n\n>hexo init blog\n\n经过稍长时间的等待，会在当前目录下生成一个新的文件夹，里面的文件就是我们项目的雏形了\n\n>{% asset_img 4.png %}\n\ncd进该目录，执行\n\n>npm i\n\n会下载项目需要的node模块\n\n>{% asset_img 5.png %}\n\n下载完成之后，执行\n\n>hexo generate\n\n会生成静态文件，也就是我们的页面了\n*hexo generate 可以简写为 hexo g*\n\n>{% asset_img 6.png %}\n\n然后执行\n\n>hexo server\n\n会在本地搭建服务器，浏览器打开[http://localhost:4000/](http://localhost:4000/)就可以看到我们的博客了\n*hexo server 可以简写为 hexo s*\n\n>{% asset_img 7.png %}\n\n如果hexo server出错，提示\n\n>Port 4000 has been used. Try other port instead.\n\n这说明电脑当前4000端口被占用，ctrl+c退出当前服务器，执行“hexo server -p 端口号”改变本地服务器端口就可以了\n\n>{% asset_img 8.png %}\n\n### 文件与github关联\n\n本地可以访问我们的博客了，那么怎么才能保存到github里呢？这时候我们前面保存的新建的库的SSH就要用到了。\n编辑器打开blog文件夹，找到根目录下面的_config.yml文件\n\n>{% asset_img 9.png %}\n\n找到deploy选项，修改并增加参数，repostory后面的值就是我们刚才保存的库的SSH\n**这时候要注意，每一个key值的冒号后面都要有一个半角空格，不然会出错**\n<br/>\n\n因为我们github里面的库是在子目录下，所以还要找到url选项并修改\nurl是github库的url，root就是我们库的名字了\n\n>{% asset_img 12.png %}\n\n然后执行\n\n>npm install hexo-deployer-git --save\n>{% asset_img 15.png %}\n\n这个模块是用来生成和部署文章的\n执行\n\n>hexo new post \"first_blog\"\n\n>{% asset_img 14.png %}\n\n打开source/_post目录，会发现已经生成一个.md文件\n编辑器打开该文件，写入\n\n>`### hello world`\n\n之后，打开命令行工具，执行\n\n>hexo clean\n>{% asset_img 13.png %}\n\n清除静态缓存文件，然后执行\n\n>hexo g\n\n生成静态文件，执行\n\n>hexo d\n>{% asset_img 16.png %}\n\n即可部署到github里了，打开github里可以看到自己的commit\n\n>{% asset_img 17.png %}\n\n但是这个时候我们的博客还是没有地址的。点击settings，找到GitHub Pages选项的Source，选择master branch\n\n>{% asset_img 18.png %}\n\n然后点击save，等待页面刷新后就会出现\n\n>{% asset_img 19.png %}\n\n这时候点击链接就可以访问到我们的博客了\n\n>{% asset_img 20.png %}\n\n到此为止，基础的搭建博客完成，接下来就是对我们的博客进行个性化修改以及添加文章了。","source":"_posts/first.md","raw":"---\ntitle: hexo 与 github 搭建个人博客教程\ndate: 2018-05-15 11:27:49\ntags:\n    - hexo\n    - github\n    - 博客\n---\n\n### 前言\n\n工作几年了，第一次写博客，看看自己能坚持多久吧。\n今天就将hexo搭配github搭建个人博客教程作为第一篇文章。\n<!-- more -->\n\n### 准备工作\n工欲善其事必先利其器。要想搭建个人博客，node和git是必须的工具。网上关于这两种工具的下载安装都有很成熟的介绍，在这里就不献丑了。\n然后就是在github上注册自己的账号，成功后准备接下来的工作。\n### github新建项目\n>{% asset_img 1.png %}\n\n<br/>\n点击右边绿色的NEW按钮，会跳转到\n<br/>\n\n>{% asset_img 2.png %}\n\n<br/>\n输入对应的库名字以及描述，点击下方的绿色的Create repository按钮，就会生成自己的库了。如下图\n<br/>\n\n>{% asset_img 3.png %}\n\n然后复制自己库地址的SSH，保存，稍后会用到\n\n### hexo安装\n在命令行执行下列代码即可全局安装hexo\n\n>npm install -g hexo-cli\n\n如果安装速度比较慢的话，也可以使用npm淘宝镜像来下载\n\n>npm install -g hexo-cli --registry=https://registry.npm.taobao.org\n\n### hexo使用\n在命令行工具执行\n\n>hexo init blog\n\n经过稍长时间的等待，会在当前目录下生成一个新的文件夹，里面的文件就是我们项目的雏形了\n\n>{% asset_img 4.png %}\n\ncd进该目录，执行\n\n>npm i\n\n会下载项目需要的node模块\n\n>{% asset_img 5.png %}\n\n下载完成之后，执行\n\n>hexo generate\n\n会生成静态文件，也就是我们的页面了\n*hexo generate 可以简写为 hexo g*\n\n>{% asset_img 6.png %}\n\n然后执行\n\n>hexo server\n\n会在本地搭建服务器，浏览器打开[http://localhost:4000/](http://localhost:4000/)就可以看到我们的博客了\n*hexo server 可以简写为 hexo s*\n\n>{% asset_img 7.png %}\n\n如果hexo server出错，提示\n\n>Port 4000 has been used. Try other port instead.\n\n这说明电脑当前4000端口被占用，ctrl+c退出当前服务器，执行“hexo server -p 端口号”改变本地服务器端口就可以了\n\n>{% asset_img 8.png %}\n\n### 文件与github关联\n\n本地可以访问我们的博客了，那么怎么才能保存到github里呢？这时候我们前面保存的新建的库的SSH就要用到了。\n编辑器打开blog文件夹，找到根目录下面的_config.yml文件\n\n>{% asset_img 9.png %}\n\n找到deploy选项，修改并增加参数，repostory后面的值就是我们刚才保存的库的SSH\n**这时候要注意，每一个key值的冒号后面都要有一个半角空格，不然会出错**\n<br/>\n\n因为我们github里面的库是在子目录下，所以还要找到url选项并修改\nurl是github库的url，root就是我们库的名字了\n\n>{% asset_img 12.png %}\n\n然后执行\n\n>npm install hexo-deployer-git --save\n>{% asset_img 15.png %}\n\n这个模块是用来生成和部署文章的\n执行\n\n>hexo new post \"first_blog\"\n\n>{% asset_img 14.png %}\n\n打开source/_post目录，会发现已经生成一个.md文件\n编辑器打开该文件，写入\n\n>`### hello world`\n\n之后，打开命令行工具，执行\n\n>hexo clean\n>{% asset_img 13.png %}\n\n清除静态缓存文件，然后执行\n\n>hexo g\n\n生成静态文件，执行\n\n>hexo d\n>{% asset_img 16.png %}\n\n即可部署到github里了，打开github里可以看到自己的commit\n\n>{% asset_img 17.png %}\n\n但是这个时候我们的博客还是没有地址的。点击settings，找到GitHub Pages选项的Source，选择master branch\n\n>{% asset_img 18.png %}\n\n然后点击save，等待页面刷新后就会出现\n\n>{% asset_img 19.png %}\n\n这时候点击链接就可以访问到我们的博客了\n\n>{% asset_img 20.png %}\n\n到此为止，基础的搭建博客完成，接下来就是对我们的博客进行个性化修改以及添加文章了。","slug":"first","published":1,"updated":"2018-07-12T09:24:10.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqvj00056cuvoa0q1877","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>工作几年了，第一次写博客，看看自己能坚持多久吧。<br>今天就将hexo搭配github搭建个人博客教程作为第一篇文章。<br><a id=\"more\"></a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>工欲善其事必先利其器。要想搭建个人博客，node和git是必须的工具。网上关于这两种工具的下载安装都有很成熟的介绍，在这里就不献丑了。<br>然后就是在github上注册自己的账号，成功后准备接下来的工作。</p>\n<h3 id=\"github新建项目\"><a href=\"#github新建项目\" class=\"headerlink\" title=\"github新建项目\"></a>github新建项目</h3><blockquote>\n<img src=\"/myBlog/2018/05/15/first/1.png\">\n</blockquote>\n<p><br><br>点击右边绿色的NEW按钮，会跳转到<br><br></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/2.png\">\n</blockquote>\n<p><br><br>输入对应的库名字以及描述，点击下方的绿色的Create repository按钮，就会生成自己的库了。如下图<br><br></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/3.png\">\n</blockquote>\n<p>然后复制自己库地址的SSH，保存，稍后会用到</p>\n<h3 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h3><p>在命令行执行下列代码即可全局安装hexo</p>\n<blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n<p>如果安装速度比较慢的话，也可以使用npm淘宝镜像来下载</p>\n<blockquote>\n<p>npm install -g hexo-cli –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<h3 id=\"hexo使用\"><a href=\"#hexo使用\" class=\"headerlink\" title=\"hexo使用\"></a>hexo使用</h3><p>在命令行工具执行</p>\n<blockquote>\n<p>hexo init blog</p>\n</blockquote>\n<p>经过稍长时间的等待，会在当前目录下生成一个新的文件夹，里面的文件就是我们项目的雏形了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/4.png\">\n</blockquote>\n<p>cd进该目录，执行</p>\n<blockquote>\n<p>npm i</p>\n</blockquote>\n<p>会下载项目需要的node模块</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/5.png\">\n</blockquote>\n<p>下载完成之后，执行</p>\n<blockquote>\n<p>hexo generate</p>\n</blockquote>\n<p>会生成静态文件，也就是我们的页面了<br><em>hexo generate 可以简写为 hexo g</em></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/6.png\">\n</blockquote>\n<p>然后执行</p>\n<blockquote>\n<p>hexo server</p>\n</blockquote>\n<p>会在本地搭建服务器，浏览器打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>就可以看到我们的博客了<br><em>hexo server 可以简写为 hexo s</em></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/7.png\">\n</blockquote>\n<p>如果hexo server出错，提示</p>\n<blockquote>\n<p>Port 4000 has been used. Try other port instead.</p>\n</blockquote>\n<p>这说明电脑当前4000端口被占用，ctrl+c退出当前服务器，执行“hexo server -p 端口号”改变本地服务器端口就可以了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/8.png\">\n</blockquote>\n<h3 id=\"文件与github关联\"><a href=\"#文件与github关联\" class=\"headerlink\" title=\"文件与github关联\"></a>文件与github关联</h3><p>本地可以访问我们的博客了，那么怎么才能保存到github里呢？这时候我们前面保存的新建的库的SSH就要用到了。<br>编辑器打开blog文件夹，找到根目录下面的_config.yml文件</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/9.png\">\n</blockquote>\n<p>找到deploy选项，修改并增加参数，repostory后面的值就是我们刚才保存的库的SSH<br><strong>这时候要注意，每一个key值的冒号后面都要有一个半角空格，不然会出错</strong><br><br></p>\n<p>因为我们github里面的库是在子目录下，所以还要找到url选项并修改<br>url是github库的url，root就是我们库的名字了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/12.png\">\n</blockquote>\n<p>然后执行</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save<br><img src=\"/myBlog/2018/05/15/first/15.png\"></p>\n</blockquote>\n<p>这个模块是用来生成和部署文章的<br>执行</p>\n<blockquote>\n<p>hexo new post “first_blog”</p>\n</blockquote>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/14.png\">\n</blockquote>\n<p>打开source/_post目录，会发现已经生成一个.md文件<br>编辑器打开该文件，写入</p>\n<blockquote>\n<p><code>### hello world</code></p>\n</blockquote>\n<p>之后，打开命令行工具，执行</p>\n<blockquote>\n<p>hexo clean<br><img src=\"/myBlog/2018/05/15/first/13.png\"></p>\n</blockquote>\n<p>清除静态缓存文件，然后执行</p>\n<blockquote>\n<p>hexo g</p>\n</blockquote>\n<p>生成静态文件，执行</p>\n<blockquote>\n<p>hexo d<br><img src=\"/myBlog/2018/05/15/first/16.png\"></p>\n</blockquote>\n<p>即可部署到github里了，打开github里可以看到自己的commit</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/17.png\">\n</blockquote>\n<p>但是这个时候我们的博客还是没有地址的。点击settings，找到GitHub Pages选项的Source，选择master branch</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/18.png\">\n</blockquote>\n<p>然后点击save，等待页面刷新后就会出现</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/19.png\">\n</blockquote>\n<p>这时候点击链接就可以访问到我们的博客了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/20.png\">\n</blockquote>\n<p>到此为止，基础的搭建博客完成，接下来就是对我们的博客进行个性化修改以及添加文章了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>工作几年了，第一次写博客，看看自己能坚持多久吧。<br>今天就将hexo搭配github搭建个人博客教程作为第一篇文章。<br>","more":"</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>工欲善其事必先利其器。要想搭建个人博客，node和git是必须的工具。网上关于这两种工具的下载安装都有很成熟的介绍，在这里就不献丑了。<br>然后就是在github上注册自己的账号，成功后准备接下来的工作。</p>\n<h3 id=\"github新建项目\"><a href=\"#github新建项目\" class=\"headerlink\" title=\"github新建项目\"></a>github新建项目</h3><blockquote>\n<img src=\"/myBlog/2018/05/15/first/1.png\">\n</blockquote>\n<p><br><br>点击右边绿色的NEW按钮，会跳转到<br><br></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/2.png\">\n</blockquote>\n<p><br><br>输入对应的库名字以及描述，点击下方的绿色的Create repository按钮，就会生成自己的库了。如下图<br><br></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/3.png\">\n</blockquote>\n<p>然后复制自己库地址的SSH，保存，稍后会用到</p>\n<h3 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h3><p>在命令行执行下列代码即可全局安装hexo</p>\n<blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n<p>如果安装速度比较慢的话，也可以使用npm淘宝镜像来下载</p>\n<blockquote>\n<p>npm install -g hexo-cli –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<h3 id=\"hexo使用\"><a href=\"#hexo使用\" class=\"headerlink\" title=\"hexo使用\"></a>hexo使用</h3><p>在命令行工具执行</p>\n<blockquote>\n<p>hexo init blog</p>\n</blockquote>\n<p>经过稍长时间的等待，会在当前目录下生成一个新的文件夹，里面的文件就是我们项目的雏形了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/4.png\">\n</blockquote>\n<p>cd进该目录，执行</p>\n<blockquote>\n<p>npm i</p>\n</blockquote>\n<p>会下载项目需要的node模块</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/5.png\">\n</blockquote>\n<p>下载完成之后，执行</p>\n<blockquote>\n<p>hexo generate</p>\n</blockquote>\n<p>会生成静态文件，也就是我们的页面了<br><em>hexo generate 可以简写为 hexo g</em></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/6.png\">\n</blockquote>\n<p>然后执行</p>\n<blockquote>\n<p>hexo server</p>\n</blockquote>\n<p>会在本地搭建服务器，浏览器打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>就可以看到我们的博客了<br><em>hexo server 可以简写为 hexo s</em></p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/7.png\">\n</blockquote>\n<p>如果hexo server出错，提示</p>\n<blockquote>\n<p>Port 4000 has been used. Try other port instead.</p>\n</blockquote>\n<p>这说明电脑当前4000端口被占用，ctrl+c退出当前服务器，执行“hexo server -p 端口号”改变本地服务器端口就可以了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/8.png\">\n</blockquote>\n<h3 id=\"文件与github关联\"><a href=\"#文件与github关联\" class=\"headerlink\" title=\"文件与github关联\"></a>文件与github关联</h3><p>本地可以访问我们的博客了，那么怎么才能保存到github里呢？这时候我们前面保存的新建的库的SSH就要用到了。<br>编辑器打开blog文件夹，找到根目录下面的_config.yml文件</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/9.png\">\n</blockquote>\n<p>找到deploy选项，修改并增加参数，repostory后面的值就是我们刚才保存的库的SSH<br><strong>这时候要注意，每一个key值的冒号后面都要有一个半角空格，不然会出错</strong><br><br></p>\n<p>因为我们github里面的库是在子目录下，所以还要找到url选项并修改<br>url是github库的url，root就是我们库的名字了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/12.png\">\n</blockquote>\n<p>然后执行</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save<br><img src=\"/myBlog/2018/05/15/first/15.png\"></p>\n</blockquote>\n<p>这个模块是用来生成和部署文章的<br>执行</p>\n<blockquote>\n<p>hexo new post “first_blog”</p>\n</blockquote>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/14.png\">\n</blockquote>\n<p>打开source/_post目录，会发现已经生成一个.md文件<br>编辑器打开该文件，写入</p>\n<blockquote>\n<p><code>### hello world</code></p>\n</blockquote>\n<p>之后，打开命令行工具，执行</p>\n<blockquote>\n<p>hexo clean<br><img src=\"/myBlog/2018/05/15/first/13.png\"></p>\n</blockquote>\n<p>清除静态缓存文件，然后执行</p>\n<blockquote>\n<p>hexo g</p>\n</blockquote>\n<p>生成静态文件，执行</p>\n<blockquote>\n<p>hexo d<br><img src=\"/myBlog/2018/05/15/first/16.png\"></p>\n</blockquote>\n<p>即可部署到github里了，打开github里可以看到自己的commit</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/17.png\">\n</blockquote>\n<p>但是这个时候我们的博客还是没有地址的。点击settings，找到GitHub Pages选项的Source，选择master branch</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/18.png\">\n</blockquote>\n<p>然后点击save，等待页面刷新后就会出现</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/19.png\">\n</blockquote>\n<p>这时候点击链接就可以访问到我们的博客了</p>\n<blockquote>\n<img src=\"/myBlog/2018/05/15/first/20.png\">\n</blockquote>\n<p>到此为止，基础的搭建博客完成，接下来就是对我们的博客进行个性化修改以及添加文章了。</p>"},{"title":"前端渲染和后端渲染","date":"2018-07-12T09:18:34.000Z","_content":"\n有些人一看这些什么前端渲染、后端渲染……什么的，就感觉一脸懵逼，what are they？ 其实有些时候一些概念性的东西会让你觉得：“我靠，好高深啊，什么新技术啊”。但是当你知道它究竟是什么的时候你就会发现，原来就那么回事。就相当于“渐进增强、优雅降级” 一样，你可能不太清楚他们是什么，但是其实就是做兼容的两种方式罢了。\n\n概念的东西都是比较唬人的，但是有些时候你不得不去了解他们到底讲的是什么！\n\n### 后端渲染（服务器端渲染）\n多年前，Web是一群由HTML和CSS构建的静态页面，没有太多的交互性。每个用户行为要求服务器来创建和提供一个完整的页面。后端渲染HTML的情况下，浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，这里的计算就是服务器经过解析存放在服务器端的模板文件来完成的，在这种情况下，浏览器只进行了HTML的解析，以及通过操作系统提供的操纵显示器显示内容的系统调用在显示器上把HTML所代表的图像显示给用户。\n<!-- more -->\n国企的网站全部是使用的后端渲染，也就是说，你点击一下，他就会刷新一个，然后从后台请求新的页面数据。\n好处：前端耗时少（前端只负责将html进行展示），利于SEO\n坏处：网络传输数据量大，占用（部分、少部分）服务器运算资源，response 出的数据量会（稍）大点，模板改了前端的交互和样式什么的一样得跟着联动修改\n前端渲染（客户端渲染）\n前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端循环json生成DOM插入到页面中去。\n\n* 好处：网络传输数据量小（减少了服务器压力）\n* 坏处：前端耗时较多，不利于SEO\n其实前后端的渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的html代码中形成最终的html展示在用户页面上。  因为字符串的拼接必然会损耗一些性能资源。 所以……\n如果在服务器端渲染，那么消耗的就是server端的性能。所以用户量达到一定程度后，后端会考虑缓存部分数据，避免消耗过多资源重复渲染一些对及时性要求并不高的地方以节约资源。例如常见的排行榜，可以将渲染后的模块缓存起来，十分钟更新一次。\n如果是在客户端渲染，常见的手段，比如是直接生成DOM插入到html 中，或者是使用一些前端的模板引擎等。他们初次渲染的原理大多是将原html中的数据标记（例如{{text}}）替换。一般来说只要不作死无脑用了document.write，浏览器端初次渲染的性能消耗都是可以接受的。\n浏览器端渲染的难点在于数据变更后，页面响应式变更时如何节省资源？要知道DOM直接读写的速度是很慢的，而且不小心还会触发重绘，在复杂的SPA下直接读写DOM带来的影响会很明显。拿React、Vue来举例子，在数据变更后，他会帮你diff，没有改变可以复用的部分是不会重新渲染一遍的。\n### SEO\nbrowser端渲染是对搜索引擎不太友好的，虽然SPA怎么做SEO已经有过无数讨论和实践，但是browser端很大程度是不如server端渲染容易做SEO。\n后端渲染html 叫吐或者喷，爬虫可以看到完整的呈现源码\n前端模板渲染html叫填，爬虫看不到完整的呈现源码\n### 维护\nserver端渲染很多时候前后端是一起完成的。有的团队是前端开发人员直接写模板文件，但是也有的团队是前端写了静态html文件，后端改为模板。后一种团队在维护时是比较蛋疼的，改个css都要前后端在一起搞定\n### 如何选择\n关于在server端还是在browser端渲染的选择，更多的是要看业务场景。\n例如一个注重SEO的新闻站点，非强交互的页面，做成SPA意义并不大，还是建议server端渲染。\n像后台管理页面，或者是QQ空间这类强交互的网页应用，可以尝试浏览器端渲染。后端开发人员也能更加专注于接口服务的提供，不用去考虑页面的渲染问题，分工合作更加愉快。\n\n在浏览器端渲染时，如果数据量并不大，也没有什么大的改变，那么自己用原生的DOM API去操作绰绰有余了，即使有时候有些操作会浪费一些性能资源，影响也不会太大，反而引入了框架和库却只用了一部分功能是一种浪费。但是如果做一个复杂的页面应用，我还是建议使用Vue这类库/框架来帮你完成。一方面来说，他们会帮你把业务逻辑抽象，不让你去关注渲染这些操作，可以提升开发效率；另一方面，恐怕大多数人自己实现渲染以及数据变更后的DOM变更未必会比库/框架做得好。如果他能做的更好，一定要请他为主流框架/库去提PR或者issues来帮助库/框架做的更好；或者激进点，他自己写一个框架造福大家吧。\n既然已经走在前面，就不要频繁的往后看！\n参考链接：\n链接：https://www.manster.me/?p=473","source":"_posts/render.md","raw":"---\ntitle: 前端渲染和后端渲染\ndate: 2018-07-12 17:18:34\ntags:\n    - SEO\n    - 渲染\n---\n\n有些人一看这些什么前端渲染、后端渲染……什么的，就感觉一脸懵逼，what are they？ 其实有些时候一些概念性的东西会让你觉得：“我靠，好高深啊，什么新技术啊”。但是当你知道它究竟是什么的时候你就会发现，原来就那么回事。就相当于“渐进增强、优雅降级” 一样，你可能不太清楚他们是什么，但是其实就是做兼容的两种方式罢了。\n\n概念的东西都是比较唬人的，但是有些时候你不得不去了解他们到底讲的是什么！\n\n### 后端渲染（服务器端渲染）\n多年前，Web是一群由HTML和CSS构建的静态页面，没有太多的交互性。每个用户行为要求服务器来创建和提供一个完整的页面。后端渲染HTML的情况下，浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，这里的计算就是服务器经过解析存放在服务器端的模板文件来完成的，在这种情况下，浏览器只进行了HTML的解析，以及通过操作系统提供的操纵显示器显示内容的系统调用在显示器上把HTML所代表的图像显示给用户。\n<!-- more -->\n国企的网站全部是使用的后端渲染，也就是说，你点击一下，他就会刷新一个，然后从后台请求新的页面数据。\n好处：前端耗时少（前端只负责将html进行展示），利于SEO\n坏处：网络传输数据量大，占用（部分、少部分）服务器运算资源，response 出的数据量会（稍）大点，模板改了前端的交互和样式什么的一样得跟着联动修改\n前端渲染（客户端渲染）\n前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端循环json生成DOM插入到页面中去。\n\n* 好处：网络传输数据量小（减少了服务器压力）\n* 坏处：前端耗时较多，不利于SEO\n其实前后端的渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的html代码中形成最终的html展示在用户页面上。  因为字符串的拼接必然会损耗一些性能资源。 所以……\n如果在服务器端渲染，那么消耗的就是server端的性能。所以用户量达到一定程度后，后端会考虑缓存部分数据，避免消耗过多资源重复渲染一些对及时性要求并不高的地方以节约资源。例如常见的排行榜，可以将渲染后的模块缓存起来，十分钟更新一次。\n如果是在客户端渲染，常见的手段，比如是直接生成DOM插入到html 中，或者是使用一些前端的模板引擎等。他们初次渲染的原理大多是将原html中的数据标记（例如{{text}}）替换。一般来说只要不作死无脑用了document.write，浏览器端初次渲染的性能消耗都是可以接受的。\n浏览器端渲染的难点在于数据变更后，页面响应式变更时如何节省资源？要知道DOM直接读写的速度是很慢的，而且不小心还会触发重绘，在复杂的SPA下直接读写DOM带来的影响会很明显。拿React、Vue来举例子，在数据变更后，他会帮你diff，没有改变可以复用的部分是不会重新渲染一遍的。\n### SEO\nbrowser端渲染是对搜索引擎不太友好的，虽然SPA怎么做SEO已经有过无数讨论和实践，但是browser端很大程度是不如server端渲染容易做SEO。\n后端渲染html 叫吐或者喷，爬虫可以看到完整的呈现源码\n前端模板渲染html叫填，爬虫看不到完整的呈现源码\n### 维护\nserver端渲染很多时候前后端是一起完成的。有的团队是前端开发人员直接写模板文件，但是也有的团队是前端写了静态html文件，后端改为模板。后一种团队在维护时是比较蛋疼的，改个css都要前后端在一起搞定\n### 如何选择\n关于在server端还是在browser端渲染的选择，更多的是要看业务场景。\n例如一个注重SEO的新闻站点，非强交互的页面，做成SPA意义并不大，还是建议server端渲染。\n像后台管理页面，或者是QQ空间这类强交互的网页应用，可以尝试浏览器端渲染。后端开发人员也能更加专注于接口服务的提供，不用去考虑页面的渲染问题，分工合作更加愉快。\n\n在浏览器端渲染时，如果数据量并不大，也没有什么大的改变，那么自己用原生的DOM API去操作绰绰有余了，即使有时候有些操作会浪费一些性能资源，影响也不会太大，反而引入了框架和库却只用了一部分功能是一种浪费。但是如果做一个复杂的页面应用，我还是建议使用Vue这类库/框架来帮你完成。一方面来说，他们会帮你把业务逻辑抽象，不让你去关注渲染这些操作，可以提升开发效率；另一方面，恐怕大多数人自己实现渲染以及数据变更后的DOM变更未必会比库/框架做得好。如果他能做的更好，一定要请他为主流框架/库去提PR或者issues来帮助库/框架做的更好；或者激进点，他自己写一个框架造福大家吧。\n既然已经走在前面，就不要频繁的往后看！\n参考链接：\n链接：https://www.manster.me/?p=473","slug":"render","published":1,"updated":"2018-07-12T09:22:53.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqvl00076cuvjgifjese","content":"<p>有些人一看这些什么前端渲染、后端渲染……什么的，就感觉一脸懵逼，what are they？ 其实有些时候一些概念性的东西会让你觉得：“我靠，好高深啊，什么新技术啊”。但是当你知道它究竟是什么的时候你就会发现，原来就那么回事。就相当于“渐进增强、优雅降级” 一样，你可能不太清楚他们是什么，但是其实就是做兼容的两种方式罢了。</p>\n<p>概念的东西都是比较唬人的，但是有些时候你不得不去了解他们到底讲的是什么！</p>\n<h3 id=\"后端渲染（服务器端渲染）\"><a href=\"#后端渲染（服务器端渲染）\" class=\"headerlink\" title=\"后端渲染（服务器端渲染）\"></a>后端渲染（服务器端渲染）</h3><p>多年前，Web是一群由HTML和CSS构建的静态页面，没有太多的交互性。每个用户行为要求服务器来创建和提供一个完整的页面。后端渲染HTML的情况下，浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，这里的计算就是服务器经过解析存放在服务器端的模板文件来完成的，在这种情况下，浏览器只进行了HTML的解析，以及通过操作系统提供的操纵显示器显示内容的系统调用在显示器上把HTML所代表的图像显示给用户。<br><a id=\"more\"></a><br>国企的网站全部是使用的后端渲染，也就是说，你点击一下，他就会刷新一个，然后从后台请求新的页面数据。<br>好处：前端耗时少（前端只负责将html进行展示），利于SEO<br>坏处：网络传输数据量大，占用（部分、少部分）服务器运算资源，response 出的数据量会（稍）大点，模板改了前端的交互和样式什么的一样得跟着联动修改<br>前端渲染（客户端渲染）<br>前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端循环json生成DOM插入到页面中去。</p>\n<ul>\n<li>好处：网络传输数据量小（减少了服务器压力）</li>\n<li>坏处：前端耗时较多，不利于SEO<br>其实前后端的渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的html代码中形成最终的html展示在用户页面上。  因为字符串的拼接必然会损耗一些性能资源。 所以……<br>如果在服务器端渲染，那么消耗的就是server端的性能。所以用户量达到一定程度后，后端会考虑缓存部分数据，避免消耗过多资源重复渲染一些对及时性要求并不高的地方以节约资源。例如常见的排行榜，可以将渲染后的模块缓存起来，十分钟更新一次。<br>如果是在客户端渲染，常见的手段，比如是直接生成DOM插入到html 中，或者是使用一些前端的模板引擎等。他们初次渲染的原理大多是将原html中的数据标记（例如）替换。一般来说只要不作死无脑用了document.write，浏览器端初次渲染的性能消耗都是可以接受的。<br>浏览器端渲染的难点在于数据变更后，页面响应式变更时如何节省资源？要知道DOM直接读写的速度是很慢的，而且不小心还会触发重绘，在复杂的SPA下直接读写DOM带来的影响会很明显。拿React、Vue来举例子，在数据变更后，他会帮你diff，没有改变可以复用的部分是不会重新渲染一遍的。<h3 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h3>browser端渲染是对搜索引擎不太友好的，虽然SPA怎么做SEO已经有过无数讨论和实践，但是browser端很大程度是不如server端渲染容易做SEO。<br>后端渲染html 叫吐或者喷，爬虫可以看到完整的呈现源码<br>前端模板渲染html叫填，爬虫看不到完整的呈现源码<h3 id=\"维护\"><a href=\"#维护\" class=\"headerlink\" title=\"维护\"></a>维护</h3>server端渲染很多时候前后端是一起完成的。有的团队是前端开发人员直接写模板文件，但是也有的团队是前端写了静态html文件，后端改为模板。后一种团队在维护时是比较蛋疼的，改个css都要前后端在一起搞定<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3>关于在server端还是在browser端渲染的选择，更多的是要看业务场景。<br>例如一个注重SEO的新闻站点，非强交互的页面，做成SPA意义并不大，还是建议server端渲染。<br>像后台管理页面，或者是QQ空间这类强交互的网页应用，可以尝试浏览器端渲染。后端开发人员也能更加专注于接口服务的提供，不用去考虑页面的渲染问题，分工合作更加愉快。</li>\n</ul>\n<p>在浏览器端渲染时，如果数据量并不大，也没有什么大的改变，那么自己用原生的DOM API去操作绰绰有余了，即使有时候有些操作会浪费一些性能资源，影响也不会太大，反而引入了框架和库却只用了一部分功能是一种浪费。但是如果做一个复杂的页面应用，我还是建议使用Vue这类库/框架来帮你完成。一方面来说，他们会帮你把业务逻辑抽象，不让你去关注渲染这些操作，可以提升开发效率；另一方面，恐怕大多数人自己实现渲染以及数据变更后的DOM变更未必会比库/框架做得好。如果他能做的更好，一定要请他为主流框架/库去提PR或者issues来帮助库/框架做的更好；或者激进点，他自己写一个框架造福大家吧。<br>既然已经走在前面，就不要频繁的往后看！<br>参考链接：<br>链接：<a href=\"https://www.manster.me/?p=473\" target=\"_blank\" rel=\"noopener\">https://www.manster.me/?p=473</a></p>\n","site":{"data":{}},"excerpt":"<p>有些人一看这些什么前端渲染、后端渲染……什么的，就感觉一脸懵逼，what are they？ 其实有些时候一些概念性的东西会让你觉得：“我靠，好高深啊，什么新技术啊”。但是当你知道它究竟是什么的时候你就会发现，原来就那么回事。就相当于“渐进增强、优雅降级” 一样，你可能不太清楚他们是什么，但是其实就是做兼容的两种方式罢了。</p>\n<p>概念的东西都是比较唬人的，但是有些时候你不得不去了解他们到底讲的是什么！</p>\n<h3 id=\"后端渲染（服务器端渲染）\"><a href=\"#后端渲染（服务器端渲染）\" class=\"headerlink\" title=\"后端渲染（服务器端渲染）\"></a>后端渲染（服务器端渲染）</h3><p>多年前，Web是一群由HTML和CSS构建的静态页面，没有太多的交互性。每个用户行为要求服务器来创建和提供一个完整的页面。后端渲染HTML的情况下，浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，这里的计算就是服务器经过解析存放在服务器端的模板文件来完成的，在这种情况下，浏览器只进行了HTML的解析，以及通过操作系统提供的操纵显示器显示内容的系统调用在显示器上把HTML所代表的图像显示给用户。<br>","more":"<br>国企的网站全部是使用的后端渲染，也就是说，你点击一下，他就会刷新一个，然后从后台请求新的页面数据。<br>好处：前端耗时少（前端只负责将html进行展示），利于SEO<br>坏处：网络传输数据量大，占用（部分、少部分）服务器运算资源，response 出的数据量会（稍）大点，模板改了前端的交互和样式什么的一样得跟着联动修改<br>前端渲染（客户端渲染）<br>前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端循环json生成DOM插入到页面中去。</p>\n<ul>\n<li>好处：网络传输数据量小（减少了服务器压力）</li>\n<li>坏处：前端耗时较多，不利于SEO<br>其实前后端的渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的html代码中形成最终的html展示在用户页面上。  因为字符串的拼接必然会损耗一些性能资源。 所以……<br>如果在服务器端渲染，那么消耗的就是server端的性能。所以用户量达到一定程度后，后端会考虑缓存部分数据，避免消耗过多资源重复渲染一些对及时性要求并不高的地方以节约资源。例如常见的排行榜，可以将渲染后的模块缓存起来，十分钟更新一次。<br>如果是在客户端渲染，常见的手段，比如是直接生成DOM插入到html 中，或者是使用一些前端的模板引擎等。他们初次渲染的原理大多是将原html中的数据标记（例如）替换。一般来说只要不作死无脑用了document.write，浏览器端初次渲染的性能消耗都是可以接受的。<br>浏览器端渲染的难点在于数据变更后，页面响应式变更时如何节省资源？要知道DOM直接读写的速度是很慢的，而且不小心还会触发重绘，在复杂的SPA下直接读写DOM带来的影响会很明显。拿React、Vue来举例子，在数据变更后，他会帮你diff，没有改变可以复用的部分是不会重新渲染一遍的。<h3 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h3>browser端渲染是对搜索引擎不太友好的，虽然SPA怎么做SEO已经有过无数讨论和实践，但是browser端很大程度是不如server端渲染容易做SEO。<br>后端渲染html 叫吐或者喷，爬虫可以看到完整的呈现源码<br>前端模板渲染html叫填，爬虫看不到完整的呈现源码<h3 id=\"维护\"><a href=\"#维护\" class=\"headerlink\" title=\"维护\"></a>维护</h3>server端渲染很多时候前后端是一起完成的。有的团队是前端开发人员直接写模板文件，但是也有的团队是前端写了静态html文件，后端改为模板。后一种团队在维护时是比较蛋疼的，改个css都要前后端在一起搞定<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3>关于在server端还是在browser端渲染的选择，更多的是要看业务场景。<br>例如一个注重SEO的新闻站点，非强交互的页面，做成SPA意义并不大，还是建议server端渲染。<br>像后台管理页面，或者是QQ空间这类强交互的网页应用，可以尝试浏览器端渲染。后端开发人员也能更加专注于接口服务的提供，不用去考虑页面的渲染问题，分工合作更加愉快。</li>\n</ul>\n<p>在浏览器端渲染时，如果数据量并不大，也没有什么大的改变，那么自己用原生的DOM API去操作绰绰有余了，即使有时候有些操作会浪费一些性能资源，影响也不会太大，反而引入了框架和库却只用了一部分功能是一种浪费。但是如果做一个复杂的页面应用，我还是建议使用Vue这类库/框架来帮你完成。一方面来说，他们会帮你把业务逻辑抽象，不让你去关注渲染这些操作，可以提升开发效率；另一方面，恐怕大多数人自己实现渲染以及数据变更后的DOM变更未必会比库/框架做得好。如果他能做的更好，一定要请他为主流框架/库去提PR或者issues来帮助库/框架做的更好；或者激进点，他自己写一个框架造福大家吧。<br>既然已经走在前面，就不要频繁的往后看！<br>参考链接：<br>链接：<a href=\"https://www.manster.me/?p=473\" target=\"_blank\" rel=\"noopener\">https://www.manster.me/?p=473</a></p>"},{"title":"UEditor编辑器的使用","date":"2018-07-06T02:18:51.000Z","_content":"\n### 前言\n\n百度编辑器 UEditor 目前来讲算是国内运用比较广泛的一个编辑器了，不仅开源而且还有中文文档。最近也在使用它，正好把自己遇到的问题和解决的过程都记录下来。\n<!-- more -->\n\n### 正文\n\n首先是下载 [UEditor](http://ueditor.baidu.com/build/build_down.php?n=ueditor&v=1_4_3_3-src)，下载完成之后解压文件，进入该文件夹后，打开命令行工具，输入\n\n    npm i\n安装结束后，执行\n\n    grunt\n\n就会打包代码\n\n>{% asset_img 1.png %}\n\n打包完成之后，会生成一个 dist 文件夹，进入该文件夹，复制 utf8-php 文件夹，粘贴到项目里面的 src/assets 目录下面，同时也要粘贴在项目的 static 目录里面，assets 目录下面除了 lang 文件夹和与其平行目录的js文件外都删除。项目目录大致如下图\n\n>{% asset_img 3.png %}\n\n文件都处理妥当之后，打开 assets 目录下面的 ueditor.config.js，修改下图代码\n\n>{% asset_img 2.png %}\n\n    // 这里是配置Ueditor内部进行文件请求时的静态文件服务地址\n    window.UEDITOR_HOME_URL = \"/static/utf8-php/\";\n\n配置完成之后,在 components 目录里新建 ueditor.vue 文件，引入\n\n      import '../assets/utf8-php/ueditor.config.js'\n      import '../assets/utf8-php/ueditor.all.min.js'\n      import '../assets/utf8-php/ueditor.all.js'\n      import '../assets/utf8-php/lang/zh-cn/zh-cn.js'\n      import '../assets/utf8-php/ueditor.parse.min.js'\n      import '../assets/utf8-php/ueditor.parse.js'\n\n然后在 vue 文件，template标签里面写入\n\n    <script id=\"editor\" type=\"text/plain\"></script>\n\nscript标签 mounted 方法里面写入\n\n    this.editor = UE.getEditor('editor', {\n      initialFrameWidth: 460,\n      initialFrameHeight: 772\n    });\n\ndestroyed方法里面写入\n\n    this.editor.destroy();\n\n这个时候引用该组件，打开项目首页，在控制台会发现下图错误\n\n>{% asset_img 4.png %}\n\n这是因为 ueditor 的 js 方法里引用了这些方法，但是 babel 在转码的时候默认为所有 js 文件加了 use stric，而严格模式下诸如\n\n    arguments.callee\n\n就会报错。解决的方法在[这里](https://github.com/JiayiLi/TristaLee-vue-blog/issues/1)。\n\n解决之后打开首页\n\n>{% asset_img 5.png %}\n\n我们会发现控制台还是有错误提示，这是因为上传的路径不正确，但是我们的项目是要上传到自己的 oss 服务器的，所以只需要在 ueditor.config.js 里面，把\n\n    , serverUrl: URL + \"php/controller.php\"\n\n这行代码注释掉就好了。\n\n但是这么多按钮，我需要的只有几个，这时候打开 ueditor.config.js, 找到 toolbars 属性，把不需要的全部删除，\n\n>{% asset_img 6.png %}\n>{% asset_img 7.png %}\n\n清爽很多了。\n\n我的项目需要插入图片和视频的形式和 ueditor 是不一样的，所以需要我添加自定义按钮和事件。查看文档后找到了 UE.registerUI 方法，在 mounted 方法里写入下列代码\n\n    let that = this;\n    UE.registerUI('插入图片 插入视频', function(editor, uiName) {\n        //注册按钮执行时的command命令，使用命令默认就会带有回退操作\n        editor.registerCommand(uiName, {\n            execCommand: function() {\n              if (uiName == '插入图片') {\n                // 你自己的上传图片事件\n              } else {\n                // 你自己的上传视频事件\n              }\n            }\n        });\n        //创建一个button\n        var btn = new UE.ui.Button({\n            //按钮的名字\n            name: uiName,\n            //提示\n            title: uiName,\n            //添加额外样式,指定icon图标,这里使用一个原始的插入图片和插入视频icon\n            cssRules: uiName == '插入图片'?'background-position: -380px 0;':'background-position: -320px -20px;',\n            //点击时执行的命令\n            onclick: function() {\n                //这里可以不用执行命令,做你自己的操作也可\n                editor.execCommand(uiName);\n            }\n        });\n        \n        //当点到编辑内容上时，按钮要做的状态反射\n        editor.addListener('selectionchange', function() {\n            var state = editor.queryCommandState(uiName);\n            if (state == -1) {\n                btn.setDisabled(true);\n                btn.setChecked(false);\n            } else {\n                btn.setDisabled(false);\n                btn.setChecked(state);\n            }\n        });\n        //因为你是添加button,所以需要返回这个button\n        return btn;\n    });\n\n然后在上面插入自己的上传图片和视频的方法就完工了。\n\n","source":"_posts/ueditor.md","raw":"---\ntitle: UEditor编辑器的使用\ndate: 2018-07-06 10:18:51\ntags:\n    - UEditor\n    - 秀米\n    - UEditor插入视频\n---\n\n### 前言\n\n百度编辑器 UEditor 目前来讲算是国内运用比较广泛的一个编辑器了，不仅开源而且还有中文文档。最近也在使用它，正好把自己遇到的问题和解决的过程都记录下来。\n<!-- more -->\n\n### 正文\n\n首先是下载 [UEditor](http://ueditor.baidu.com/build/build_down.php?n=ueditor&v=1_4_3_3-src)，下载完成之后解压文件，进入该文件夹后，打开命令行工具，输入\n\n    npm i\n安装结束后，执行\n\n    grunt\n\n就会打包代码\n\n>{% asset_img 1.png %}\n\n打包完成之后，会生成一个 dist 文件夹，进入该文件夹，复制 utf8-php 文件夹，粘贴到项目里面的 src/assets 目录下面，同时也要粘贴在项目的 static 目录里面，assets 目录下面除了 lang 文件夹和与其平行目录的js文件外都删除。项目目录大致如下图\n\n>{% asset_img 3.png %}\n\n文件都处理妥当之后，打开 assets 目录下面的 ueditor.config.js，修改下图代码\n\n>{% asset_img 2.png %}\n\n    // 这里是配置Ueditor内部进行文件请求时的静态文件服务地址\n    window.UEDITOR_HOME_URL = \"/static/utf8-php/\";\n\n配置完成之后,在 components 目录里新建 ueditor.vue 文件，引入\n\n      import '../assets/utf8-php/ueditor.config.js'\n      import '../assets/utf8-php/ueditor.all.min.js'\n      import '../assets/utf8-php/ueditor.all.js'\n      import '../assets/utf8-php/lang/zh-cn/zh-cn.js'\n      import '../assets/utf8-php/ueditor.parse.min.js'\n      import '../assets/utf8-php/ueditor.parse.js'\n\n然后在 vue 文件，template标签里面写入\n\n    <script id=\"editor\" type=\"text/plain\"></script>\n\nscript标签 mounted 方法里面写入\n\n    this.editor = UE.getEditor('editor', {\n      initialFrameWidth: 460,\n      initialFrameHeight: 772\n    });\n\ndestroyed方法里面写入\n\n    this.editor.destroy();\n\n这个时候引用该组件，打开项目首页，在控制台会发现下图错误\n\n>{% asset_img 4.png %}\n\n这是因为 ueditor 的 js 方法里引用了这些方法，但是 babel 在转码的时候默认为所有 js 文件加了 use stric，而严格模式下诸如\n\n    arguments.callee\n\n就会报错。解决的方法在[这里](https://github.com/JiayiLi/TristaLee-vue-blog/issues/1)。\n\n解决之后打开首页\n\n>{% asset_img 5.png %}\n\n我们会发现控制台还是有错误提示，这是因为上传的路径不正确，但是我们的项目是要上传到自己的 oss 服务器的，所以只需要在 ueditor.config.js 里面，把\n\n    , serverUrl: URL + \"php/controller.php\"\n\n这行代码注释掉就好了。\n\n但是这么多按钮，我需要的只有几个，这时候打开 ueditor.config.js, 找到 toolbars 属性，把不需要的全部删除，\n\n>{% asset_img 6.png %}\n>{% asset_img 7.png %}\n\n清爽很多了。\n\n我的项目需要插入图片和视频的形式和 ueditor 是不一样的，所以需要我添加自定义按钮和事件。查看文档后找到了 UE.registerUI 方法，在 mounted 方法里写入下列代码\n\n    let that = this;\n    UE.registerUI('插入图片 插入视频', function(editor, uiName) {\n        //注册按钮执行时的command命令，使用命令默认就会带有回退操作\n        editor.registerCommand(uiName, {\n            execCommand: function() {\n              if (uiName == '插入图片') {\n                // 你自己的上传图片事件\n              } else {\n                // 你自己的上传视频事件\n              }\n            }\n        });\n        //创建一个button\n        var btn = new UE.ui.Button({\n            //按钮的名字\n            name: uiName,\n            //提示\n            title: uiName,\n            //添加额外样式,指定icon图标,这里使用一个原始的插入图片和插入视频icon\n            cssRules: uiName == '插入图片'?'background-position: -380px 0;':'background-position: -320px -20px;',\n            //点击时执行的命令\n            onclick: function() {\n                //这里可以不用执行命令,做你自己的操作也可\n                editor.execCommand(uiName);\n            }\n        });\n        \n        //当点到编辑内容上时，按钮要做的状态反射\n        editor.addListener('selectionchange', function() {\n            var state = editor.queryCommandState(uiName);\n            if (state == -1) {\n                btn.setDisabled(true);\n                btn.setChecked(false);\n            } else {\n                btn.setDisabled(false);\n                btn.setChecked(state);\n            }\n        });\n        //因为你是添加button,所以需要返回这个button\n        return btn;\n    });\n\n然后在上面插入自己的上传图片和视频的方法就完工了。\n\n","slug":"ueditor","published":1,"updated":"2018-07-12T09:23:26.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqvm00086cuvldwy649x","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>百度编辑器 UEditor 目前来讲算是国内运用比较广泛的一个编辑器了，不仅开源而且还有中文文档。最近也在使用它，正好把自己遇到的问题和解决的过程都记录下来。<br><a id=\"more\"></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>首先是下载 <a href=\"http://ueditor.baidu.com/build/build_down.php?n=ueditor&amp;v=1_4_3_3-src\" target=\"_blank\" rel=\"noopener\">UEditor</a>，下载完成之后解压文件，进入该文件夹后，打开命令行工具，输入</p>\n<pre><code>npm i\n</code></pre><p>安装结束后，执行</p>\n<pre><code>grunt\n</code></pre><p>就会打包代码</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/1.png\">\n</blockquote>\n<p>打包完成之后，会生成一个 dist 文件夹，进入该文件夹，复制 utf8-php 文件夹，粘贴到项目里面的 src/assets 目录下面，同时也要粘贴在项目的 static 目录里面，assets 目录下面除了 lang 文件夹和与其平行目录的js文件外都删除。项目目录大致如下图</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/3.png\">\n</blockquote>\n<p>文件都处理妥当之后，打开 assets 目录下面的 ueditor.config.js，修改下图代码</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/2.png\">\n</blockquote>\n<pre><code>// 这里是配置Ueditor内部进行文件请求时的静态文件服务地址\nwindow.UEDITOR_HOME_URL = &quot;/static/utf8-php/&quot;;\n</code></pre><p>配置完成之后,在 components 目录里新建 ueditor.vue 文件，引入</p>\n<pre><code>import &apos;../assets/utf8-php/ueditor.config.js&apos;\nimport &apos;../assets/utf8-php/ueditor.all.min.js&apos;\nimport &apos;../assets/utf8-php/ueditor.all.js&apos;\nimport &apos;../assets/utf8-php/lang/zh-cn/zh-cn.js&apos;\nimport &apos;../assets/utf8-php/ueditor.parse.min.js&apos;\nimport &apos;../assets/utf8-php/ueditor.parse.js&apos;\n</code></pre><p>然后在 vue 文件，template标签里面写入</p>\n<pre><code>&lt;script id=&quot;editor&quot; type=&quot;text/plain&quot;&gt;&lt;/script&gt;\n</code></pre><p>script标签 mounted 方法里面写入</p>\n<pre><code>this.editor = UE.getEditor(&apos;editor&apos;, {\n  initialFrameWidth: 460,\n  initialFrameHeight: 772\n});\n</code></pre><p>destroyed方法里面写入</p>\n<pre><code>this.editor.destroy();\n</code></pre><p>这个时候引用该组件，打开项目首页，在控制台会发现下图错误</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/4.png\">\n</blockquote>\n<p>这是因为 ueditor 的 js 方法里引用了这些方法，但是 babel 在转码的时候默认为所有 js 文件加了 use stric，而严格模式下诸如</p>\n<pre><code>arguments.callee\n</code></pre><p>就会报错。解决的方法在<a href=\"https://github.com/JiayiLi/TristaLee-vue-blog/issues/1\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>解决之后打开首页</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/5.png\">\n</blockquote>\n<p>我们会发现控制台还是有错误提示，这是因为上传的路径不正确，但是我们的项目是要上传到自己的 oss 服务器的，所以只需要在 ueditor.config.js 里面，把</p>\n<pre><code>, serverUrl: URL + &quot;php/controller.php&quot;\n</code></pre><p>这行代码注释掉就好了。</p>\n<p>但是这么多按钮，我需要的只有几个，这时候打开 ueditor.config.js, 找到 toolbars 属性，把不需要的全部删除，</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/6.png\">\n<img src=\"/myBlog/2018/07/06/ueditor/7.png\">\n</blockquote>\n<p>清爽很多了。</p>\n<p>我的项目需要插入图片和视频的形式和 ueditor 是不一样的，所以需要我添加自定义按钮和事件。查看文档后找到了 UE.registerUI 方法，在 mounted 方法里写入下列代码</p>\n<pre><code>let that = this;\nUE.registerUI(&apos;插入图片 插入视频&apos;, function(editor, uiName) {\n    //注册按钮执行时的command命令，使用命令默认就会带有回退操作\n    editor.registerCommand(uiName, {\n        execCommand: function() {\n          if (uiName == &apos;插入图片&apos;) {\n            // 你自己的上传图片事件\n          } else {\n            // 你自己的上传视频事件\n          }\n        }\n    });\n    //创建一个button\n    var btn = new UE.ui.Button({\n        //按钮的名字\n        name: uiName,\n        //提示\n        title: uiName,\n        //添加额外样式,指定icon图标,这里使用一个原始的插入图片和插入视频icon\n        cssRules: uiName == &apos;插入图片&apos;?&apos;background-position: -380px 0;&apos;:&apos;background-position: -320px -20px;&apos;,\n        //点击时执行的命令\n        onclick: function() {\n            //这里可以不用执行命令,做你自己的操作也可\n            editor.execCommand(uiName);\n        }\n    });\n\n    //当点到编辑内容上时，按钮要做的状态反射\n    editor.addListener(&apos;selectionchange&apos;, function() {\n        var state = editor.queryCommandState(uiName);\n        if (state == -1) {\n            btn.setDisabled(true);\n            btn.setChecked(false);\n        } else {\n            btn.setDisabled(false);\n            btn.setChecked(state);\n        }\n    });\n    //因为你是添加button,所以需要返回这个button\n    return btn;\n});\n</code></pre><p>然后在上面插入自己的上传图片和视频的方法就完工了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>百度编辑器 UEditor 目前来讲算是国内运用比较广泛的一个编辑器了，不仅开源而且还有中文文档。最近也在使用它，正好把自己遇到的问题和解决的过程都记录下来。<br>","more":"</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>首先是下载 <a href=\"http://ueditor.baidu.com/build/build_down.php?n=ueditor&amp;v=1_4_3_3-src\" target=\"_blank\" rel=\"noopener\">UEditor</a>，下载完成之后解压文件，进入该文件夹后，打开命令行工具，输入</p>\n<pre><code>npm i\n</code></pre><p>安装结束后，执行</p>\n<pre><code>grunt\n</code></pre><p>就会打包代码</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/1.png\">\n</blockquote>\n<p>打包完成之后，会生成一个 dist 文件夹，进入该文件夹，复制 utf8-php 文件夹，粘贴到项目里面的 src/assets 目录下面，同时也要粘贴在项目的 static 目录里面，assets 目录下面除了 lang 文件夹和与其平行目录的js文件外都删除。项目目录大致如下图</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/3.png\">\n</blockquote>\n<p>文件都处理妥当之后，打开 assets 目录下面的 ueditor.config.js，修改下图代码</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/2.png\">\n</blockquote>\n<pre><code>// 这里是配置Ueditor内部进行文件请求时的静态文件服务地址\nwindow.UEDITOR_HOME_URL = &quot;/static/utf8-php/&quot;;\n</code></pre><p>配置完成之后,在 components 目录里新建 ueditor.vue 文件，引入</p>\n<pre><code>import &apos;../assets/utf8-php/ueditor.config.js&apos;\nimport &apos;../assets/utf8-php/ueditor.all.min.js&apos;\nimport &apos;../assets/utf8-php/ueditor.all.js&apos;\nimport &apos;../assets/utf8-php/lang/zh-cn/zh-cn.js&apos;\nimport &apos;../assets/utf8-php/ueditor.parse.min.js&apos;\nimport &apos;../assets/utf8-php/ueditor.parse.js&apos;\n</code></pre><p>然后在 vue 文件，template标签里面写入</p>\n<pre><code>&lt;script id=&quot;editor&quot; type=&quot;text/plain&quot;&gt;&lt;/script&gt;\n</code></pre><p>script标签 mounted 方法里面写入</p>\n<pre><code>this.editor = UE.getEditor(&apos;editor&apos;, {\n  initialFrameWidth: 460,\n  initialFrameHeight: 772\n});\n</code></pre><p>destroyed方法里面写入</p>\n<pre><code>this.editor.destroy();\n</code></pre><p>这个时候引用该组件，打开项目首页，在控制台会发现下图错误</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/4.png\">\n</blockquote>\n<p>这是因为 ueditor 的 js 方法里引用了这些方法，但是 babel 在转码的时候默认为所有 js 文件加了 use stric，而严格模式下诸如</p>\n<pre><code>arguments.callee\n</code></pre><p>就会报错。解决的方法在<a href=\"https://github.com/JiayiLi/TristaLee-vue-blog/issues/1\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>解决之后打开首页</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/5.png\">\n</blockquote>\n<p>我们会发现控制台还是有错误提示，这是因为上传的路径不正确，但是我们的项目是要上传到自己的 oss 服务器的，所以只需要在 ueditor.config.js 里面，把</p>\n<pre><code>, serverUrl: URL + &quot;php/controller.php&quot;\n</code></pre><p>这行代码注释掉就好了。</p>\n<p>但是这么多按钮，我需要的只有几个，这时候打开 ueditor.config.js, 找到 toolbars 属性，把不需要的全部删除，</p>\n<blockquote>\n<img src=\"/myBlog/2018/07/06/ueditor/6.png\">\n<img src=\"/myBlog/2018/07/06/ueditor/7.png\">\n</blockquote>\n<p>清爽很多了。</p>\n<p>我的项目需要插入图片和视频的形式和 ueditor 是不一样的，所以需要我添加自定义按钮和事件。查看文档后找到了 UE.registerUI 方法，在 mounted 方法里写入下列代码</p>\n<pre><code>let that = this;\nUE.registerUI(&apos;插入图片 插入视频&apos;, function(editor, uiName) {\n    //注册按钮执行时的command命令，使用命令默认就会带有回退操作\n    editor.registerCommand(uiName, {\n        execCommand: function() {\n          if (uiName == &apos;插入图片&apos;) {\n            // 你自己的上传图片事件\n          } else {\n            // 你自己的上传视频事件\n          }\n        }\n    });\n    //创建一个button\n    var btn = new UE.ui.Button({\n        //按钮的名字\n        name: uiName,\n        //提示\n        title: uiName,\n        //添加额外样式,指定icon图标,这里使用一个原始的插入图片和插入视频icon\n        cssRules: uiName == &apos;插入图片&apos;?&apos;background-position: -380px 0;&apos;:&apos;background-position: -320px -20px;&apos;,\n        //点击时执行的命令\n        onclick: function() {\n            //这里可以不用执行命令,做你自己的操作也可\n            editor.execCommand(uiName);\n        }\n    });\n\n    //当点到编辑内容上时，按钮要做的状态反射\n    editor.addListener(&apos;selectionchange&apos;, function() {\n        var state = editor.queryCommandState(uiName);\n        if (state == -1) {\n            btn.setDisabled(true);\n            btn.setChecked(false);\n        } else {\n            btn.setDisabled(false);\n            btn.setChecked(state);\n        }\n    });\n    //因为你是添加button,所以需要返回这个button\n    return btn;\n});\n</code></pre><p>然后在上面插入自己的上传图片和视频的方法就完工了。</p>"},{"title":"|| && 的巧用","date":"2018-06-12T07:43:19.000Z","_content":"\n### 前言\n今天看代码的时候，看到了下面这行代码\n\n    const PORT = process.env.PORT && Number(process.env.PORT)\n\n>{% asset_img 1.png %}__“还能这样玩？？？”__\n\n然后去google了一下才发现 js 运算符 || && 的妙用。\n<!-- more -->\n\n### 正文\n\n先出一道题\n\n{% asset_img 2.jpg %}\n\n如图：\n假设对成长速度规定如下：\n成长速度为5则显示1个箭头；\n成长速度为10则显示2个箭头；\n成长速度为12则显示3个箭头；\n成长速度为15则显示4个箭头；\n其他都显示为0个箭头。\n\n差一点的 if else： （我现在就处于这个阶段。。。汗）\n\n    var arrow = 0;\n    if (speed == 5) {\n    \tarrow = 1\n    } else if (speed == 10) {\n    \tarrow = 2\n    } else if (speed == 12) {\n    \tarrow = 3\n    } else if (speed == 15) {\n    \tarrow = 4\n    } else {\n    \tarrow = 0\n    }\n\n\n好一点的 switch case\n\n    switch(speed) {\n      case 5: arrow = 1;\n      break;\n      case 10: arrow = 2;\n      break;\n      case 12: arrow = 3;\n      break;\n      case 15: arrow = 4;\n      break;\n      default: arrow = 0;\n      break\n    }\n\n但是如果改一下要求：\n成长速度为>12显示4个箭头；\n成长速度为>10显示3个箭头；\n成长速度为>5显示2个箭头；\n成长速度为>0显示1个箭头；\n成长速度为<=0显示0个箭头。\n\n那么 switch case 用起来也不太方便了。\n\n这时候就到了我们今天的重点了。\n\n    var arrow = (speed == 5 && 1) || (speed == 10 && 2) || (speed == 12 && 3) || (speed == 15 && 4) || 0;\n\n第二个需求\n\n    var arrow = (speed > 12 && 4) || (speed > 10 && 3) || (speed > 5 && 2) || (speed > 0 && 1) || 0;\n\n首先来复习一下 js 里面的基础知识.在 js 逻辑运算中, 0, \"\", null, undefined, NaN都会在判断的时候隐式转化为 false ,其他都为 true.\n这里随便提下，经常看到别人代码里 if(!!attr)，刚开始挺疑惑为什么不写成 if(attr) 的方式，后来了解到这是一种更严谨的写法，!! 的作用是把一个其他类型的变量转成boolean类型。\n下面主要介绍下 || 和 &&.\n几乎所有计算机语言中 || 和 && 都遵循“短路”原则，即 && 判断式中第一个表达式为假则不会判断第二个表达式，|| 正相反。\njs 也遵循上述规则，但是比较有意思的是返回的值。\n\n    var attr = true && 4 && 'aaa';\n\n运行的结果，attr的值就为‘aaa’。\n\n再来看看||：\n\n    var attr = attr || {};\n\n这个运算经常用来判断一个变量是否已定义，否则的话就给它一个初始值，这再给函数参数定义默认值的时候比较常见。\n\n### 用法\n\n    if (a >= 5) {\n      alert('你好')\n    }\n\n可以写成\n\n    a >= 5 && alet('你好')\n\n这样一行表达式就可以搞定。但是需要权衡的是，js 中 || 和 && 的特性在帮我们精简了代码的同时，也降低了代码的可读性。\n\n我们可以不使用这些代码，但是我们一定要能看懂，因为这些技巧已经被广泛应用，尤其是在 jquery 等 js 框架里的代码。\n\n最后让我们看一段 jquery 里面的代码：\n\n    var wrap = \n    // option or optgroup\n    !tags.indexOf(\"<opt\") && [ 1, \"<select multiple='multiple'>\", \"</select>\" ] ||\n\n    !tags.indexOf(\"<leg\") && [ 1, \"<fieldset>\", \"</fieldset>\" ] ||\n\n    tags.match(/^<(thead|tbody|tfoot|colg|cap)/) && [ 1, \"<table>\", \"</table>\" ] ||\n\n    !tags.indexOf(\"<tr\") && [ 2, \"<table><tbody>\", \"</tbody></table>\" ] ||\n\n    // <thead> matched above\n    (!tags.indexOf(\"<td\") || !tags.indexOf(\"<th\")) && [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ] ||\n\n    !tags.indexOf(\"<col\") && [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ] ||\n\n    // IE can't serialize <link> and <script> tags normally\n    !jQuery.support.htmlSerialize && [ 1, \"div<div>\", \"</div>\" ] ||\n\n    [ 0, \"\", \"\" ];\n\n    // Go to html and back, then peel off extra wrappers\n    div.innerHTML = wrap[1] + elem + wrap[2];\n\n    // Move to the right depth\n    while ( wrap[0]-- )\n        div = div.lastChild;\n\n这段代码是作者用来处理 `$(html)` 时，有些代码必须要约束的， 如 `<option>` 必须在 `<select></select>` 标签对里面。还有作者很巧妙的一点就是 `!tags.indexOf('<opt')`,很简单的就实现了 startWith 的功能，没有多余的代码。jquery 中还有很多这种精妙的代码，大家都可以去学习学习。\n","source":"_posts/second.md","raw":"---\ntitle: '|| && 的巧用'\ndate: 2018-06-12 15:43:19\ntags:\n    - '||'\n    - '&&'\n---\n\n### 前言\n今天看代码的时候，看到了下面这行代码\n\n    const PORT = process.env.PORT && Number(process.env.PORT)\n\n>{% asset_img 1.png %}__“还能这样玩？？？”__\n\n然后去google了一下才发现 js 运算符 || && 的妙用。\n<!-- more -->\n\n### 正文\n\n先出一道题\n\n{% asset_img 2.jpg %}\n\n如图：\n假设对成长速度规定如下：\n成长速度为5则显示1个箭头；\n成长速度为10则显示2个箭头；\n成长速度为12则显示3个箭头；\n成长速度为15则显示4个箭头；\n其他都显示为0个箭头。\n\n差一点的 if else： （我现在就处于这个阶段。。。汗）\n\n    var arrow = 0;\n    if (speed == 5) {\n    \tarrow = 1\n    } else if (speed == 10) {\n    \tarrow = 2\n    } else if (speed == 12) {\n    \tarrow = 3\n    } else if (speed == 15) {\n    \tarrow = 4\n    } else {\n    \tarrow = 0\n    }\n\n\n好一点的 switch case\n\n    switch(speed) {\n      case 5: arrow = 1;\n      break;\n      case 10: arrow = 2;\n      break;\n      case 12: arrow = 3;\n      break;\n      case 15: arrow = 4;\n      break;\n      default: arrow = 0;\n      break\n    }\n\n但是如果改一下要求：\n成长速度为>12显示4个箭头；\n成长速度为>10显示3个箭头；\n成长速度为>5显示2个箭头；\n成长速度为>0显示1个箭头；\n成长速度为<=0显示0个箭头。\n\n那么 switch case 用起来也不太方便了。\n\n这时候就到了我们今天的重点了。\n\n    var arrow = (speed == 5 && 1) || (speed == 10 && 2) || (speed == 12 && 3) || (speed == 15 && 4) || 0;\n\n第二个需求\n\n    var arrow = (speed > 12 && 4) || (speed > 10 && 3) || (speed > 5 && 2) || (speed > 0 && 1) || 0;\n\n首先来复习一下 js 里面的基础知识.在 js 逻辑运算中, 0, \"\", null, undefined, NaN都会在判断的时候隐式转化为 false ,其他都为 true.\n这里随便提下，经常看到别人代码里 if(!!attr)，刚开始挺疑惑为什么不写成 if(attr) 的方式，后来了解到这是一种更严谨的写法，!! 的作用是把一个其他类型的变量转成boolean类型。\n下面主要介绍下 || 和 &&.\n几乎所有计算机语言中 || 和 && 都遵循“短路”原则，即 && 判断式中第一个表达式为假则不会判断第二个表达式，|| 正相反。\njs 也遵循上述规则，但是比较有意思的是返回的值。\n\n    var attr = true && 4 && 'aaa';\n\n运行的结果，attr的值就为‘aaa’。\n\n再来看看||：\n\n    var attr = attr || {};\n\n这个运算经常用来判断一个变量是否已定义，否则的话就给它一个初始值，这再给函数参数定义默认值的时候比较常见。\n\n### 用法\n\n    if (a >= 5) {\n      alert('你好')\n    }\n\n可以写成\n\n    a >= 5 && alet('你好')\n\n这样一行表达式就可以搞定。但是需要权衡的是，js 中 || 和 && 的特性在帮我们精简了代码的同时，也降低了代码的可读性。\n\n我们可以不使用这些代码，但是我们一定要能看懂，因为这些技巧已经被广泛应用，尤其是在 jquery 等 js 框架里的代码。\n\n最后让我们看一段 jquery 里面的代码：\n\n    var wrap = \n    // option or optgroup\n    !tags.indexOf(\"<opt\") && [ 1, \"<select multiple='multiple'>\", \"</select>\" ] ||\n\n    !tags.indexOf(\"<leg\") && [ 1, \"<fieldset>\", \"</fieldset>\" ] ||\n\n    tags.match(/^<(thead|tbody|tfoot|colg|cap)/) && [ 1, \"<table>\", \"</table>\" ] ||\n\n    !tags.indexOf(\"<tr\") && [ 2, \"<table><tbody>\", \"</tbody></table>\" ] ||\n\n    // <thead> matched above\n    (!tags.indexOf(\"<td\") || !tags.indexOf(\"<th\")) && [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ] ||\n\n    !tags.indexOf(\"<col\") && [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ] ||\n\n    // IE can't serialize <link> and <script> tags normally\n    !jQuery.support.htmlSerialize && [ 1, \"div<div>\", \"</div>\" ] ||\n\n    [ 0, \"\", \"\" ];\n\n    // Go to html and back, then peel off extra wrappers\n    div.innerHTML = wrap[1] + elem + wrap[2];\n\n    // Move to the right depth\n    while ( wrap[0]-- )\n        div = div.lastChild;\n\n这段代码是作者用来处理 `$(html)` 时，有些代码必须要约束的， 如 `<option>` 必须在 `<select></select>` 标签对里面。还有作者很巧妙的一点就是 `!tags.indexOf('<opt')`,很简单的就实现了 startWith 的功能，没有多余的代码。jquery 中还有很多这种精妙的代码，大家都可以去学习学习。\n","slug":"second","published":1,"updated":"2018-06-12T08:52:43.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqvn000a6cuvgrpbzaoq","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天看代码的时候，看到了下面这行代码</p>\n<pre><code>const PORT = process.env.PORT &amp;&amp; Number(process.env.PORT)\n</code></pre><blockquote>\n<p><img src=\"/myBlog/2018/06/12/second/1.png\"><strong>“还能这样玩？？？”</strong></p>\n</blockquote>\n<p>然后去google了一下才发现 js 运算符 || &amp;&amp; 的妙用。<br><a id=\"more\"></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>先出一道题</p>\n<img src=\"/myBlog/2018/06/12/second/2.jpg\">\n<p>如图：<br>假设对成长速度规定如下：<br>成长速度为5则显示1个箭头；<br>成长速度为10则显示2个箭头；<br>成长速度为12则显示3个箭头；<br>成长速度为15则显示4个箭头；<br>其他都显示为0个箭头。</p>\n<p>差一点的 if else： （我现在就处于这个阶段。。。汗）</p>\n<pre><code>var arrow = 0;\nif (speed == 5) {\n    arrow = 1\n} else if (speed == 10) {\n    arrow = 2\n} else if (speed == 12) {\n    arrow = 3\n} else if (speed == 15) {\n    arrow = 4\n} else {\n    arrow = 0\n}\n</code></pre><p>好一点的 switch case</p>\n<pre><code>switch(speed) {\n  case 5: arrow = 1;\n  break;\n  case 10: arrow = 2;\n  break;\n  case 12: arrow = 3;\n  break;\n  case 15: arrow = 4;\n  break;\n  default: arrow = 0;\n  break\n}\n</code></pre><p>但是如果改一下要求：<br>成长速度为&gt;12显示4个箭头；<br>成长速度为&gt;10显示3个箭头；<br>成长速度为&gt;5显示2个箭头；<br>成长速度为&gt;0显示1个箭头；<br>成长速度为&lt;=0显示0个箭头。</p>\n<p>那么 switch case 用起来也不太方便了。</p>\n<p>这时候就到了我们今天的重点了。</p>\n<pre><code>var arrow = (speed == 5 &amp;&amp; 1) || (speed == 10 &amp;&amp; 2) || (speed == 12 &amp;&amp; 3) || (speed == 15 &amp;&amp; 4) || 0;\n</code></pre><p>第二个需求</p>\n<pre><code>var arrow = (speed &gt; 12 &amp;&amp; 4) || (speed &gt; 10 &amp;&amp; 3) || (speed &gt; 5 &amp;&amp; 2) || (speed &gt; 0 &amp;&amp; 1) || 0;\n</code></pre><p>首先来复习一下 js 里面的基础知识.在 js 逻辑运算中, 0, “”, null, undefined, NaN都会在判断的时候隐式转化为 false ,其他都为 true.<br>这里随便提下，经常看到别人代码里 if(!!attr)，刚开始挺疑惑为什么不写成 if(attr) 的方式，后来了解到这是一种更严谨的写法，!! 的作用是把一个其他类型的变量转成boolean类型。<br>下面主要介绍下 || 和 &amp;&amp;.<br>几乎所有计算机语言中 || 和 &amp;&amp; 都遵循“短路”原则，即 &amp;&amp; 判断式中第一个表达式为假则不会判断第二个表达式，|| 正相反。<br>js 也遵循上述规则，但是比较有意思的是返回的值。</p>\n<pre><code>var attr = true &amp;&amp; 4 &amp;&amp; &apos;aaa&apos;;\n</code></pre><p>运行的结果，attr的值就为‘aaa’。</p>\n<p>再来看看||：</p>\n<pre><code>var attr = attr || {};\n</code></pre><p>这个运算经常用来判断一个变量是否已定义，否则的话就给它一个初始值，这再给函数参数定义默认值的时候比较常见。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><pre><code>if (a &gt;= 5) {\n  alert(&apos;你好&apos;)\n}\n</code></pre><p>可以写成</p>\n<pre><code>a &gt;= 5 &amp;&amp; alet(&apos;你好&apos;)\n</code></pre><p>这样一行表达式就可以搞定。但是需要权衡的是，js 中 || 和 &amp;&amp; 的特性在帮我们精简了代码的同时，也降低了代码的可读性。</p>\n<p>我们可以不使用这些代码，但是我们一定要能看懂，因为这些技巧已经被广泛应用，尤其是在 jquery 等 js 框架里的代码。</p>\n<p>最后让我们看一段 jquery 里面的代码：</p>\n<pre><code>var wrap = \n// option or optgroup\n!tags.indexOf(&quot;&lt;opt&quot;) &amp;&amp; [ 1, &quot;&lt;select multiple=&apos;multiple&apos;&gt;&quot;, &quot;&lt;/select&gt;&quot; ] ||\n\n!tags.indexOf(&quot;&lt;leg&quot;) &amp;&amp; [ 1, &quot;&lt;fieldset&gt;&quot;, &quot;&lt;/fieldset&gt;&quot; ] ||\n\ntags.match(/^&lt;(thead|tbody|tfoot|colg|cap)/) &amp;&amp; [ 1, &quot;&lt;table&gt;&quot;, &quot;&lt;/table&gt;&quot; ] ||\n\n!tags.indexOf(&quot;&lt;tr&quot;) &amp;&amp; [ 2, &quot;&lt;table&gt;&lt;tbody&gt;&quot;, &quot;&lt;/tbody&gt;&lt;/table&gt;&quot; ] ||\n\n// &lt;thead&gt; matched above\n(!tags.indexOf(&quot;&lt;td&quot;) || !tags.indexOf(&quot;&lt;th&quot;)) &amp;&amp; [ 3, &quot;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&quot;, &quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; ] ||\n\n!tags.indexOf(&quot;&lt;col&quot;) &amp;&amp; [ 2, &quot;&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;&quot;, &quot;&lt;/colgroup&gt;&lt;/table&gt;&quot; ] ||\n\n// IE can&apos;t serialize &lt;link&gt; and &lt;script&gt; tags normally\n!jQuery.support.htmlSerialize &amp;&amp; [ 1, &quot;div&lt;div&gt;&quot;, &quot;&lt;/div&gt;&quot; ] ||\n\n[ 0, &quot;&quot;, &quot;&quot; ];\n\n// Go to html and back, then peel off extra wrappers\ndiv.innerHTML = wrap[1] + elem + wrap[2];\n\n// Move to the right depth\nwhile ( wrap[0]-- )\n    div = div.lastChild;\n</code></pre><p>这段代码是作者用来处理 <code>$(html)</code> 时，有些代码必须要约束的， 如 <code>&lt;option&gt;</code> 必须在 <code>&lt;select&gt;&lt;/select&gt;</code> 标签对里面。还有作者很巧妙的一点就是 <code>!tags.indexOf(&#39;&lt;opt&#39;)</code>,很简单的就实现了 startWith 的功能，没有多余的代码。jquery 中还有很多这种精妙的代码，大家都可以去学习学习。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天看代码的时候，看到了下面这行代码</p>\n<pre><code>const PORT = process.env.PORT &amp;&amp; Number(process.env.PORT)\n</code></pre><blockquote>\n<p><img src=\"/myBlog/2018/06/12/second/1.png\"><strong>“还能这样玩？？？”</strong></p>\n</blockquote>\n<p>然后去google了一下才发现 js 运算符 || &amp;&amp; 的妙用。<br>","more":"</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>先出一道题</p>\n<img src=\"/myBlog/2018/06/12/second/2.jpg\">\n<p>如图：<br>假设对成长速度规定如下：<br>成长速度为5则显示1个箭头；<br>成长速度为10则显示2个箭头；<br>成长速度为12则显示3个箭头；<br>成长速度为15则显示4个箭头；<br>其他都显示为0个箭头。</p>\n<p>差一点的 if else： （我现在就处于这个阶段。。。汗）</p>\n<pre><code>var arrow = 0;\nif (speed == 5) {\n    arrow = 1\n} else if (speed == 10) {\n    arrow = 2\n} else if (speed == 12) {\n    arrow = 3\n} else if (speed == 15) {\n    arrow = 4\n} else {\n    arrow = 0\n}\n</code></pre><p>好一点的 switch case</p>\n<pre><code>switch(speed) {\n  case 5: arrow = 1;\n  break;\n  case 10: arrow = 2;\n  break;\n  case 12: arrow = 3;\n  break;\n  case 15: arrow = 4;\n  break;\n  default: arrow = 0;\n  break\n}\n</code></pre><p>但是如果改一下要求：<br>成长速度为&gt;12显示4个箭头；<br>成长速度为&gt;10显示3个箭头；<br>成长速度为&gt;5显示2个箭头；<br>成长速度为&gt;0显示1个箭头；<br>成长速度为&lt;=0显示0个箭头。</p>\n<p>那么 switch case 用起来也不太方便了。</p>\n<p>这时候就到了我们今天的重点了。</p>\n<pre><code>var arrow = (speed == 5 &amp;&amp; 1) || (speed == 10 &amp;&amp; 2) || (speed == 12 &amp;&amp; 3) || (speed == 15 &amp;&amp; 4) || 0;\n</code></pre><p>第二个需求</p>\n<pre><code>var arrow = (speed &gt; 12 &amp;&amp; 4) || (speed &gt; 10 &amp;&amp; 3) || (speed &gt; 5 &amp;&amp; 2) || (speed &gt; 0 &amp;&amp; 1) || 0;\n</code></pre><p>首先来复习一下 js 里面的基础知识.在 js 逻辑运算中, 0, “”, null, undefined, NaN都会在判断的时候隐式转化为 false ,其他都为 true.<br>这里随便提下，经常看到别人代码里 if(!!attr)，刚开始挺疑惑为什么不写成 if(attr) 的方式，后来了解到这是一种更严谨的写法，!! 的作用是把一个其他类型的变量转成boolean类型。<br>下面主要介绍下 || 和 &amp;&amp;.<br>几乎所有计算机语言中 || 和 &amp;&amp; 都遵循“短路”原则，即 &amp;&amp; 判断式中第一个表达式为假则不会判断第二个表达式，|| 正相反。<br>js 也遵循上述规则，但是比较有意思的是返回的值。</p>\n<pre><code>var attr = true &amp;&amp; 4 &amp;&amp; &apos;aaa&apos;;\n</code></pre><p>运行的结果，attr的值就为‘aaa’。</p>\n<p>再来看看||：</p>\n<pre><code>var attr = attr || {};\n</code></pre><p>这个运算经常用来判断一个变量是否已定义，否则的话就给它一个初始值，这再给函数参数定义默认值的时候比较常见。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><pre><code>if (a &gt;= 5) {\n  alert(&apos;你好&apos;)\n}\n</code></pre><p>可以写成</p>\n<pre><code>a &gt;= 5 &amp;&amp; alet(&apos;你好&apos;)\n</code></pre><p>这样一行表达式就可以搞定。但是需要权衡的是，js 中 || 和 &amp;&amp; 的特性在帮我们精简了代码的同时，也降低了代码的可读性。</p>\n<p>我们可以不使用这些代码，但是我们一定要能看懂，因为这些技巧已经被广泛应用，尤其是在 jquery 等 js 框架里的代码。</p>\n<p>最后让我们看一段 jquery 里面的代码：</p>\n<pre><code>var wrap = \n// option or optgroup\n!tags.indexOf(&quot;&lt;opt&quot;) &amp;&amp; [ 1, &quot;&lt;select multiple=&apos;multiple&apos;&gt;&quot;, &quot;&lt;/select&gt;&quot; ] ||\n\n!tags.indexOf(&quot;&lt;leg&quot;) &amp;&amp; [ 1, &quot;&lt;fieldset&gt;&quot;, &quot;&lt;/fieldset&gt;&quot; ] ||\n\ntags.match(/^&lt;(thead|tbody|tfoot|colg|cap)/) &amp;&amp; [ 1, &quot;&lt;table&gt;&quot;, &quot;&lt;/table&gt;&quot; ] ||\n\n!tags.indexOf(&quot;&lt;tr&quot;) &amp;&amp; [ 2, &quot;&lt;table&gt;&lt;tbody&gt;&quot;, &quot;&lt;/tbody&gt;&lt;/table&gt;&quot; ] ||\n\n// &lt;thead&gt; matched above\n(!tags.indexOf(&quot;&lt;td&quot;) || !tags.indexOf(&quot;&lt;th&quot;)) &amp;&amp; [ 3, &quot;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&quot;, &quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; ] ||\n\n!tags.indexOf(&quot;&lt;col&quot;) &amp;&amp; [ 2, &quot;&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;&quot;, &quot;&lt;/colgroup&gt;&lt;/table&gt;&quot; ] ||\n\n// IE can&apos;t serialize &lt;link&gt; and &lt;script&gt; tags normally\n!jQuery.support.htmlSerialize &amp;&amp; [ 1, &quot;div&lt;div&gt;&quot;, &quot;&lt;/div&gt;&quot; ] ||\n\n[ 0, &quot;&quot;, &quot;&quot; ];\n\n// Go to html and back, then peel off extra wrappers\ndiv.innerHTML = wrap[1] + elem + wrap[2];\n\n// Move to the right depth\nwhile ( wrap[0]-- )\n    div = div.lastChild;\n</code></pre><p>这段代码是作者用来处理 <code>$(html)</code> 时，有些代码必须要约束的， 如 <code>&lt;option&gt;</code> 必须在 <code>&lt;select&gt;&lt;/select&gt;</code> 标签对里面。还有作者很巧妙的一点就是 <code>!tags.indexOf(&#39;&lt;opt&#39;)</code>,很简单的就实现了 startWith 的功能，没有多余的代码。jquery 中还有很多这种精妙的代码，大家都可以去学习学习。</p>"},{"title":"文件下载和上传","date":"2018-06-14T02:15:04.000Z","_content":"\n### 前言\n\n这几天做项目，需要文件下载及上传的功能。之前没有接触过这方面的内容，于是磕磕碰碰的开始了摸索。\n<!-- more -->\n\n### 正文\n\n\n讲到文件下载和上传的话，就必须得提到 FormData 对象了。先来一段 MDN 对于 FormData 对象的解释：\n\n>FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)，而独立于表单使用。如果表单enctype属性设为multipart/form-data ，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。\n\n下载文件，一般的接口都是 get 请求，这个时候一般是动态生成一个 form 表单，然后添加属性，最后执行 submit 方法，开始下载。\n\n    $('#download').click(function () {\n\n      var form = $(\"<form>\");\n\n      //设置表单状态为不显示\n      form.attr(\"style\", \"display:none\");\n\n      //method属性设置请求类型为post\n      form.attr(\"method\", \"get\");\n\n      //action属性设置请求路径,\n      //请求类型是post时,路径后面跟参数的方式不可用\n      //可以通过表单中的input来传递参数\n      form.attr(\"action\", globalUrl + '/downloadTemplateFile.htm');\n      $(\"body\").append(form);//将表单放置在web中\n\n      //在表单中添加input标签来传递参数\n      //如有多个参数可添加多个input标签\n      var input1 = $(\"<input>\");\n      input1.attr(\"type\", \"hidden\");\n      input1.attr(\"name\", \"downLoadFileName\");\n      input1.attr(\"value\", \"smsTemplate.txt\");\n      form.append(input1);\n      var input2 = $(\"<input>\");\n      input2.attr(\"type\", \"hidden\");\n      input2.attr(\"name\", \"fileName\");\n      input2.attr(\"value\", \"smsTemplate.txt\");\n      form.append(input2);\n\n      form.submit();//表单提交\n    })\n\n比较有意思的是如果直接 from 表单提交的话，在 form 表单里面的属性都会被当成参数传递，input 的 name 可以设置为对应的参数名，value 设置为对应值，最后执行 submit 方法的时候，会把需要的参数全部传过去。\n\n来到文件下载了，还是直接上代码吧。\n\nhtml代码\n\n    <form action=\"\" style=\"display: none\" id=\"upload-form\" method=\"post\">\n        <input type=\"file\" name=\"file\" id=\"upload_file\">\n        <input type=\"text\" name=\"couponDirectId\" id=\"couponDirectId\">\n    </form>\n\njs代码\n\n    var dataParams = new FormData(document.getElementById('upload-form'));\n    $.ajax({\n      type: 'POST',\n      url: globalUrl + '/test.htm',\n      processData: false,\n      contentType: false,\n      data: dataParams,\n      success: function (res) {\n        console.log(res)\n      },\n      error: function (err) {\n        console.log(err)\n      }\n    })\n\n之前说过执行 form 表单的 submit 方法的话，会直接把 form 标签里面的表单元素的 name 和 value 作为参数传过去。也可以设置 form 表单里面元素的属性，然后在 js 里面执行\n\n    var dataParams = new FormData(document.getElementById('upload-form'));\n\n\n将 form 表单里面的元素转化为 FormData 对象，进行传递。","source":"_posts/third.md","raw":"---\ntitle: 文件下载和上传\ndate: 2018-06-14 10:15:04\ntags:\n    - FormData\n    - 文件下载\n    - 文件上传\n---\n\n### 前言\n\n这几天做项目，需要文件下载及上传的功能。之前没有接触过这方面的内容，于是磕磕碰碰的开始了摸索。\n<!-- more -->\n\n### 正文\n\n\n讲到文件下载和上传的话，就必须得提到 FormData 对象了。先来一段 MDN 对于 FormData 对象的解释：\n\n>FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)，而独立于表单使用。如果表单enctype属性设为multipart/form-data ，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。\n\n下载文件，一般的接口都是 get 请求，这个时候一般是动态生成一个 form 表单，然后添加属性，最后执行 submit 方法，开始下载。\n\n    $('#download').click(function () {\n\n      var form = $(\"<form>\");\n\n      //设置表单状态为不显示\n      form.attr(\"style\", \"display:none\");\n\n      //method属性设置请求类型为post\n      form.attr(\"method\", \"get\");\n\n      //action属性设置请求路径,\n      //请求类型是post时,路径后面跟参数的方式不可用\n      //可以通过表单中的input来传递参数\n      form.attr(\"action\", globalUrl + '/downloadTemplateFile.htm');\n      $(\"body\").append(form);//将表单放置在web中\n\n      //在表单中添加input标签来传递参数\n      //如有多个参数可添加多个input标签\n      var input1 = $(\"<input>\");\n      input1.attr(\"type\", \"hidden\");\n      input1.attr(\"name\", \"downLoadFileName\");\n      input1.attr(\"value\", \"smsTemplate.txt\");\n      form.append(input1);\n      var input2 = $(\"<input>\");\n      input2.attr(\"type\", \"hidden\");\n      input2.attr(\"name\", \"fileName\");\n      input2.attr(\"value\", \"smsTemplate.txt\");\n      form.append(input2);\n\n      form.submit();//表单提交\n    })\n\n比较有意思的是如果直接 from 表单提交的话，在 form 表单里面的属性都会被当成参数传递，input 的 name 可以设置为对应的参数名，value 设置为对应值，最后执行 submit 方法的时候，会把需要的参数全部传过去。\n\n来到文件下载了，还是直接上代码吧。\n\nhtml代码\n\n    <form action=\"\" style=\"display: none\" id=\"upload-form\" method=\"post\">\n        <input type=\"file\" name=\"file\" id=\"upload_file\">\n        <input type=\"text\" name=\"couponDirectId\" id=\"couponDirectId\">\n    </form>\n\njs代码\n\n    var dataParams = new FormData(document.getElementById('upload-form'));\n    $.ajax({\n      type: 'POST',\n      url: globalUrl + '/test.htm',\n      processData: false,\n      contentType: false,\n      data: dataParams,\n      success: function (res) {\n        console.log(res)\n      },\n      error: function (err) {\n        console.log(err)\n      }\n    })\n\n之前说过执行 form 表单的 submit 方法的话，会直接把 form 标签里面的表单元素的 name 和 value 作为参数传过去。也可以设置 form 表单里面元素的属性，然后在 js 里面执行\n\n    var dataParams = new FormData(document.getElementById('upload-form'));\n\n\n将 form 表单里面的元素转化为 FormData 对象，进行传递。","slug":"third","published":1,"updated":"2018-07-12T09:23:35.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkhozqvo000c6cuvpijhoqms","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这几天做项目，需要文件下载及上传的功能。之前没有接触过这方面的内容，于是磕磕碰碰的开始了摸索。<br><a id=\"more\"></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>讲到文件下载和上传的话，就必须得提到 FormData 对象了。先来一段 MDN 对于 FormData 对象的解释：</p>\n<blockquote>\n<p>FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)，而独立于表单使用。如果表单enctype属性设为multipart/form-data ，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。</p>\n</blockquote>\n<p>下载文件，一般的接口都是 get 请求，这个时候一般是动态生成一个 form 表单，然后添加属性，最后执行 submit 方法，开始下载。</p>\n<pre><code>$(&apos;#download&apos;).click(function () {\n\n  var form = $(&quot;&lt;form&gt;&quot;);\n\n  //设置表单状态为不显示\n  form.attr(&quot;style&quot;, &quot;display:none&quot;);\n\n  //method属性设置请求类型为post\n  form.attr(&quot;method&quot;, &quot;get&quot;);\n\n  //action属性设置请求路径,\n  //请求类型是post时,路径后面跟参数的方式不可用\n  //可以通过表单中的input来传递参数\n  form.attr(&quot;action&quot;, globalUrl + &apos;/downloadTemplateFile.htm&apos;);\n  $(&quot;body&quot;).append(form);//将表单放置在web中\n\n  //在表单中添加input标签来传递参数\n  //如有多个参数可添加多个input标签\n  var input1 = $(&quot;&lt;input&gt;&quot;);\n  input1.attr(&quot;type&quot;, &quot;hidden&quot;);\n  input1.attr(&quot;name&quot;, &quot;downLoadFileName&quot;);\n  input1.attr(&quot;value&quot;, &quot;smsTemplate.txt&quot;);\n  form.append(input1);\n  var input2 = $(&quot;&lt;input&gt;&quot;);\n  input2.attr(&quot;type&quot;, &quot;hidden&quot;);\n  input2.attr(&quot;name&quot;, &quot;fileName&quot;);\n  input2.attr(&quot;value&quot;, &quot;smsTemplate.txt&quot;);\n  form.append(input2);\n\n  form.submit();//表单提交\n})\n</code></pre><p>比较有意思的是如果直接 from 表单提交的话，在 form 表单里面的属性都会被当成参数传递，input 的 name 可以设置为对应的参数名，value 设置为对应值，最后执行 submit 方法的时候，会把需要的参数全部传过去。</p>\n<p>来到文件下载了，还是直接上代码吧。</p>\n<p>html代码</p>\n<pre><code>&lt;form action=&quot;&quot; style=&quot;display: none&quot; id=&quot;upload-form&quot; method=&quot;post&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload_file&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;couponDirectId&quot; id=&quot;couponDirectId&quot;&gt;\n&lt;/form&gt;\n</code></pre><p>js代码</p>\n<pre><code>var dataParams = new FormData(document.getElementById(&apos;upload-form&apos;));\n$.ajax({\n  type: &apos;POST&apos;,\n  url: globalUrl + &apos;/test.htm&apos;,\n  processData: false,\n  contentType: false,\n  data: dataParams,\n  success: function (res) {\n    console.log(res)\n  },\n  error: function (err) {\n    console.log(err)\n  }\n})\n</code></pre><p>之前说过执行 form 表单的 submit 方法的话，会直接把 form 标签里面的表单元素的 name 和 value 作为参数传过去。也可以设置 form 表单里面元素的属性，然后在 js 里面执行</p>\n<pre><code>var dataParams = new FormData(document.getElementById(&apos;upload-form&apos;));\n</code></pre><p>将 form 表单里面的元素转化为 FormData 对象，进行传递。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这几天做项目，需要文件下载及上传的功能。之前没有接触过这方面的内容，于是磕磕碰碰的开始了摸索。<br>","more":"</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>讲到文件下载和上传的话，就必须得提到 FormData 对象了。先来一段 MDN 对于 FormData 对象的解释：</p>\n<blockquote>\n<p>FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)，而独立于表单使用。如果表单enctype属性设为multipart/form-data ，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。</p>\n</blockquote>\n<p>下载文件，一般的接口都是 get 请求，这个时候一般是动态生成一个 form 表单，然后添加属性，最后执行 submit 方法，开始下载。</p>\n<pre><code>$(&apos;#download&apos;).click(function () {\n\n  var form = $(&quot;&lt;form&gt;&quot;);\n\n  //设置表单状态为不显示\n  form.attr(&quot;style&quot;, &quot;display:none&quot;);\n\n  //method属性设置请求类型为post\n  form.attr(&quot;method&quot;, &quot;get&quot;);\n\n  //action属性设置请求路径,\n  //请求类型是post时,路径后面跟参数的方式不可用\n  //可以通过表单中的input来传递参数\n  form.attr(&quot;action&quot;, globalUrl + &apos;/downloadTemplateFile.htm&apos;);\n  $(&quot;body&quot;).append(form);//将表单放置在web中\n\n  //在表单中添加input标签来传递参数\n  //如有多个参数可添加多个input标签\n  var input1 = $(&quot;&lt;input&gt;&quot;);\n  input1.attr(&quot;type&quot;, &quot;hidden&quot;);\n  input1.attr(&quot;name&quot;, &quot;downLoadFileName&quot;);\n  input1.attr(&quot;value&quot;, &quot;smsTemplate.txt&quot;);\n  form.append(input1);\n  var input2 = $(&quot;&lt;input&gt;&quot;);\n  input2.attr(&quot;type&quot;, &quot;hidden&quot;);\n  input2.attr(&quot;name&quot;, &quot;fileName&quot;);\n  input2.attr(&quot;value&quot;, &quot;smsTemplate.txt&quot;);\n  form.append(input2);\n\n  form.submit();//表单提交\n})\n</code></pre><p>比较有意思的是如果直接 from 表单提交的话，在 form 表单里面的属性都会被当成参数传递，input 的 name 可以设置为对应的参数名，value 设置为对应值，最后执行 submit 方法的时候，会把需要的参数全部传过去。</p>\n<p>来到文件下载了，还是直接上代码吧。</p>\n<p>html代码</p>\n<pre><code>&lt;form action=&quot;&quot; style=&quot;display: none&quot; id=&quot;upload-form&quot; method=&quot;post&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;upload_file&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;couponDirectId&quot; id=&quot;couponDirectId&quot;&gt;\n&lt;/form&gt;\n</code></pre><p>js代码</p>\n<pre><code>var dataParams = new FormData(document.getElementById(&apos;upload-form&apos;));\n$.ajax({\n  type: &apos;POST&apos;,\n  url: globalUrl + &apos;/test.htm&apos;,\n  processData: false,\n  contentType: false,\n  data: dataParams,\n  success: function (res) {\n    console.log(res)\n  },\n  error: function (err) {\n    console.log(err)\n  }\n})\n</code></pre><p>之前说过执行 form 表单的 submit 方法的话，会直接把 form 标签里面的表单元素的 name 和 value 作为参数传过去。也可以设置 form 表单里面元素的属性，然后在 js 里面执行</p>\n<pre><code>var dataParams = new FormData(document.getElementById(&apos;upload-form&apos;));\n</code></pre><p>将 form 表单里面的元素转化为 FormData 对象，进行传递。</p>"}],"PostAsset":[{"_id":"source/_posts/second/1.png","post":"cjkhozqvn000a6cuvgrpbzaoq","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/second/2.jpg","post":"cjkhozqvn000a6cuvgrpbzaoq","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/1.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/2.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/3.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/4.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/5.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/6.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/operaVPN/7.png","post":"cjkhozqv700016cuvvqprkq1n","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/1.png","post":"cjkhozqvm00086cuvldwy649x","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/2.png","post":"cjkhozqvm00086cuvldwy649x","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/3.png","post":"cjkhozqvm00086cuvldwy649x","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/4.png","post":"cjkhozqvm00086cuvldwy649x","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/5.png","post":"cjkhozqvm00086cuvldwy649x","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/6.png","post":"cjkhozqvm00086cuvldwy649x","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/ueditor/7.png","post":"cjkhozqvm00086cuvldwy649x","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/first/20.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"20.png","modified":1,"renderable":1},{"_id":"source/_posts/first/7.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/first/1.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/first/10.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/first/11.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/first/12.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/first/13.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"13.png","modified":1,"renderable":1},{"_id":"source/_posts/first/14.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"14.png","modified":1,"renderable":1},{"_id":"source/_posts/first/15.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"15.png","modified":1,"renderable":1},{"_id":"source/_posts/first/16.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"16.png","modified":1,"renderable":1},{"_id":"source/_posts/first/17.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"17.png","modified":1,"renderable":1},{"_id":"source/_posts/first/18.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"18.png","modified":1,"renderable":1},{"_id":"source/_posts/first/19.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"19.png","modified":1,"renderable":1},{"_id":"source/_posts/first/2.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/first/3.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/first/4.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/first/5.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/first/6.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/first/8.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/first/9.png","post":"cjkhozqvj00056cuvoa0q1877","slug":"9.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjkhozqv200006cuvun6qdxiv","tag_id":"cjkhozqvf00026cuvx0dwg6s4","_id":"cjkhozqvo000b6cuvoa8328d0"},{"post_id":"cjkhozqv200006cuvun6qdxiv","tag_id":"cjkhozqvk00066cuvmhiyhlv2","_id":"cjkhozqvq000d6cuvvywh22we"},{"post_id":"cjkhozqv700016cuvvqprkq1n","tag_id":"cjkhozqvm00096cuv8humtmv5","_id":"cjkhozqvr000g6cuv4bfrd8fr"},{"post_id":"cjkhozqv700016cuvvqprkq1n","tag_id":"cjkhozqvq000e6cuv2upjy979","_id":"cjkhozqvs000h6cuvfsv8c07i"},{"post_id":"cjkhozqvh00036cuvs6de7rbo","tag_id":"cjkhozqvr000f6cuvl5099zaw","_id":"cjkhozqvt000k6cuvizl2tonk"},{"post_id":"cjkhozqvh00036cuvs6de7rbo","tag_id":"cjkhozqvs000i6cuvoyzbhq5k","_id":"cjkhozqvt000l6cuv78lw8lo4"},{"post_id":"cjkhozqvj00056cuvoa0q1877","tag_id":"cjkhozqvs000j6cuvzxcoltp7","_id":"cjkhozqvu000p6cuv40otlsn3"},{"post_id":"cjkhozqvj00056cuvoa0q1877","tag_id":"cjkhozqvt000m6cuv9l9v08y9","_id":"cjkhozqvu000q6cuv9aw396nn"},{"post_id":"cjkhozqvj00056cuvoa0q1877","tag_id":"cjkhozqvt000n6cuvywxk9nvf","_id":"cjkhozqvu000s6cuvg2u0uuqq"},{"post_id":"cjkhozqvl00076cuvjgifjese","tag_id":"cjkhozqvu000o6cuvc8b183om","_id":"cjkhozqvw000u6cuvwp7jjtd4"},{"post_id":"cjkhozqvl00076cuvjgifjese","tag_id":"cjkhozqvu000r6cuvro9usnlu","_id":"cjkhozqvw000v6cuv5bxi6v5t"},{"post_id":"cjkhozqvm00086cuvldwy649x","tag_id":"cjkhozqvr000f6cuvl5099zaw","_id":"cjkhozqvx000z6cuvqc6vhcnx"},{"post_id":"cjkhozqvm00086cuvldwy649x","tag_id":"cjkhozqvs000i6cuvoyzbhq5k","_id":"cjkhozqvx00106cuv3131g79i"},{"post_id":"cjkhozqvm00086cuvldwy649x","tag_id":"cjkhozqvw000x6cuvuqwdrv2x","_id":"cjkhozqvy00126cuvzrn2ux8j"},{"post_id":"cjkhozqvn000a6cuvgrpbzaoq","tag_id":"cjkhozqvx000y6cuvop5gf1u2","_id":"cjkhozqvz00146cuvyhlxxddm"},{"post_id":"cjkhozqvn000a6cuvgrpbzaoq","tag_id":"cjkhozqvx00116cuvwckemj00","_id":"cjkhozqvz00156cuvw6ydqa03"},{"post_id":"cjkhozqvo000c6cuvpijhoqms","tag_id":"cjkhozqvy00136cuvgrerxeyx","_id":"cjkhozqw000186cuvqj50k2ey"},{"post_id":"cjkhozqvo000c6cuvpijhoqms","tag_id":"cjkhozqvz00166cuv3qrg7bs2","_id":"cjkhozqw000196cuv2iumr1di"},{"post_id":"cjkhozqvo000c6cuvpijhoqms","tag_id":"cjkhozqvz00176cuv73m4qk15","_id":"cjkhozqw0001a6cuvwu81s29h"}],"Tag":[{"name":"css3","_id":"cjkhozqvf00026cuvx0dwg6s4"},{"name":"兼容","_id":"cjkhozqvk00066cuvmhiyhlv2"},{"name":"opera 浏览器","_id":"cjkhozqvm00096cuv8humtmv5"},{"name":"翻墙","_id":"cjkhozqvq000e6cuv2upjy979"},{"name":"UEditor","_id":"cjkhozqvr000f6cuvl5099zaw"},{"name":"秀米","_id":"cjkhozqvs000i6cuvoyzbhq5k"},{"name":"hexo","_id":"cjkhozqvs000j6cuvzxcoltp7"},{"name":"github","_id":"cjkhozqvt000m6cuv9l9v08y9"},{"name":"博客","_id":"cjkhozqvt000n6cuvywxk9nvf"},{"name":"SEO","_id":"cjkhozqvu000o6cuvc8b183om"},{"name":"渲染","_id":"cjkhozqvu000r6cuvro9usnlu"},{"name":"UEditor插入视频","_id":"cjkhozqvw000x6cuvuqwdrv2x"},{"name":"||","_id":"cjkhozqvx000y6cuvop5gf1u2"},{"name":"&&","_id":"cjkhozqvx00116cuvwckemj00"},{"name":"FormData","_id":"cjkhozqvy00136cuvgrerxeyx"},{"name":"文件下载","_id":"cjkhozqvz00166cuv3qrg7bs2"},{"name":"文件上传","_id":"cjkhozqvz00176cuv73m4qk15"}]}}